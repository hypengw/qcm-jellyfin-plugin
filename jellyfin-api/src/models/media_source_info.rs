/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MediaSourceInfo {
    #[serde(rename = "Protocol", skip_serializing_if = "Option::is_none")]
    pub protocol: Option<models::MediaProtocol>,
    #[serde(rename = "Id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<String>>,
    #[serde(rename = "Path", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub path: Option<Option<String>>,
    #[serde(rename = "EncoderPath", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub encoder_path: Option<Option<String>>,
    #[serde(rename = "EncoderProtocol", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub encoder_protocol: Option<Option<models::MediaProtocol>>,
    #[serde(rename = "Type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::MediaSourceType>,
    #[serde(rename = "Container", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub container: Option<Option<String>>,
    #[serde(rename = "Size", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub size: Option<Option<i64>>,
    #[serde(rename = "Name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    /// Gets or sets a value indicating whether the media is remote.  Differentiate internet url vs local network.
    #[serde(rename = "IsRemote", skip_serializing_if = "Option::is_none")]
    pub is_remote: Option<bool>,
    #[serde(rename = "ETag", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub e_tag: Option<Option<String>>,
    #[serde(rename = "RunTimeTicks", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub run_time_ticks: Option<Option<i64>>,
    #[serde(rename = "ReadAtNativeFramerate", skip_serializing_if = "Option::is_none")]
    pub read_at_native_framerate: Option<bool>,
    #[serde(rename = "IgnoreDts", skip_serializing_if = "Option::is_none")]
    pub ignore_dts: Option<bool>,
    #[serde(rename = "IgnoreIndex", skip_serializing_if = "Option::is_none")]
    pub ignore_index: Option<bool>,
    #[serde(rename = "GenPtsInput", skip_serializing_if = "Option::is_none")]
    pub gen_pts_input: Option<bool>,
    #[serde(rename = "SupportsTranscoding", skip_serializing_if = "Option::is_none")]
    pub supports_transcoding: Option<bool>,
    #[serde(rename = "SupportsDirectStream", skip_serializing_if = "Option::is_none")]
    pub supports_direct_stream: Option<bool>,
    #[serde(rename = "SupportsDirectPlay", skip_serializing_if = "Option::is_none")]
    pub supports_direct_play: Option<bool>,
    #[serde(rename = "IsInfiniteStream", skip_serializing_if = "Option::is_none")]
    pub is_infinite_stream: Option<bool>,
    #[serde(rename = "UseMostCompatibleTranscodingProfile", skip_serializing_if = "Option::is_none")]
    pub use_most_compatible_transcoding_profile: Option<bool>,
    #[serde(rename = "RequiresOpening", skip_serializing_if = "Option::is_none")]
    pub requires_opening: Option<bool>,
    #[serde(rename = "OpenToken", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub open_token: Option<Option<String>>,
    #[serde(rename = "RequiresClosing", skip_serializing_if = "Option::is_none")]
    pub requires_closing: Option<bool>,
    #[serde(rename = "LiveStreamId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub live_stream_id: Option<Option<String>>,
    #[serde(rename = "BufferMs", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub buffer_ms: Option<Option<i32>>,
    #[serde(rename = "RequiresLooping", skip_serializing_if = "Option::is_none")]
    pub requires_looping: Option<bool>,
    #[serde(rename = "SupportsProbing", skip_serializing_if = "Option::is_none")]
    pub supports_probing: Option<bool>,
    #[serde(rename = "VideoType", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub video_type: Option<Option<models::VideoType>>,
    #[serde(rename = "IsoType", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub iso_type: Option<Option<models::IsoType>>,
    #[serde(rename = "Video3DFormat", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub video3_d_format: Option<Option<models::Video3DFormat>>,
    #[serde(rename = "MediaStreams", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub media_streams: Option<Option<Vec<models::MediaStream>>>,
    #[serde(rename = "MediaAttachments", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub media_attachments: Option<Option<Vec<models::MediaAttachment>>>,
    #[serde(rename = "Formats", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub formats: Option<Option<Vec<String>>>,
    #[serde(rename = "Bitrate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bitrate: Option<Option<i32>>,
    #[serde(rename = "FallbackMaxStreamingBitrate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fallback_max_streaming_bitrate: Option<Option<i32>>,
    #[serde(rename = "Timestamp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<Option<models::TransportStreamTimestamp>>,
    #[serde(rename = "RequiredHttpHeaders", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub required_http_headers: Option<Option<std::collections::HashMap<String, String>>>,
    #[serde(rename = "TranscodingUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub transcoding_url: Option<Option<String>>,
    /// Media streaming protocol.  Lowercase for backwards compatibility.
    #[serde(rename = "TranscodingSubProtocol", skip_serializing_if = "Option::is_none")]
    pub transcoding_sub_protocol: Option<models::MediaStreamProtocol>,
    #[serde(rename = "TranscodingContainer", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub transcoding_container: Option<Option<String>>,
    #[serde(rename = "AnalyzeDurationMs", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub analyze_duration_ms: Option<Option<i32>>,
    #[serde(rename = "DefaultAudioStreamIndex", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub default_audio_stream_index: Option<Option<i32>>,
    #[serde(rename = "DefaultSubtitleStreamIndex", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub default_subtitle_stream_index: Option<Option<i32>>,
    #[serde(rename = "HasSegments", skip_serializing_if = "Option::is_none")]
    pub has_segments: Option<bool>,
}

impl MediaSourceInfo {
    pub fn new() -> MediaSourceInfo {
        MediaSourceInfo {
            protocol: None,
            id: None,
            path: None,
            encoder_path: None,
            encoder_protocol: None,
            r#type: None,
            container: None,
            size: None,
            name: None,
            is_remote: None,
            e_tag: None,
            run_time_ticks: None,
            read_at_native_framerate: None,
            ignore_dts: None,
            ignore_index: None,
            gen_pts_input: None,
            supports_transcoding: None,
            supports_direct_stream: None,
            supports_direct_play: None,
            is_infinite_stream: None,
            use_most_compatible_transcoding_profile: None,
            requires_opening: None,
            open_token: None,
            requires_closing: None,
            live_stream_id: None,
            buffer_ms: None,
            requires_looping: None,
            supports_probing: None,
            video_type: None,
            iso_type: None,
            video3_d_format: None,
            media_streams: None,
            media_attachments: None,
            formats: None,
            bitrate: None,
            fallback_max_streaming_bitrate: None,
            timestamp: None,
            required_http_headers: None,
            transcoding_url: None,
            transcoding_sub_protocol: None,
            transcoding_container: None,
            analyze_duration_ms: None,
            default_audio_stream_index: None,
            default_subtitle_stream_index: None,
            has_segments: None,
        }
    }
}

