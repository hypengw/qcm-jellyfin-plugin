/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PlaybackInfoDto : Plabyback info dto.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlaybackInfoDto {
    /// Gets or sets the playback userId.
    #[serde(rename = "UserId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<Option<uuid::Uuid>>,
    /// Gets or sets the max streaming bitrate.
    #[serde(rename = "MaxStreamingBitrate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_streaming_bitrate: Option<Option<i32>>,
    /// Gets or sets the start time in ticks.
    #[serde(rename = "StartTimeTicks", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub start_time_ticks: Option<Option<i64>>,
    /// Gets or sets the audio stream index.
    #[serde(rename = "AudioStreamIndex", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub audio_stream_index: Option<Option<i32>>,
    /// Gets or sets the subtitle stream index.
    #[serde(rename = "SubtitleStreamIndex", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub subtitle_stream_index: Option<Option<i32>>,
    /// Gets or sets the max audio channels.
    #[serde(rename = "MaxAudioChannels", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_audio_channels: Option<Option<i32>>,
    /// Gets or sets the media source id.
    #[serde(rename = "MediaSourceId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub media_source_id: Option<Option<String>>,
    /// Gets or sets the live stream id.
    #[serde(rename = "LiveStreamId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub live_stream_id: Option<Option<String>>,
    /// Gets or sets the device profile.
    #[serde(rename = "DeviceProfile", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub device_profile: Option<Option<Box<models::DeviceProfile>>>,
    /// Gets or sets a value indicating whether to enable direct play.
    #[serde(rename = "EnableDirectPlay", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub enable_direct_play: Option<Option<bool>>,
    /// Gets or sets a value indicating whether to enable direct stream.
    #[serde(rename = "EnableDirectStream", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub enable_direct_stream: Option<Option<bool>>,
    /// Gets or sets a value indicating whether to enable transcoding.
    #[serde(rename = "EnableTranscoding", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub enable_transcoding: Option<Option<bool>>,
    /// Gets or sets a value indicating whether to enable video stream copy.
    #[serde(rename = "AllowVideoStreamCopy", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub allow_video_stream_copy: Option<Option<bool>>,
    /// Gets or sets a value indicating whether to allow audio stream copy.
    #[serde(rename = "AllowAudioStreamCopy", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub allow_audio_stream_copy: Option<Option<bool>>,
    /// Gets or sets a value indicating whether to auto open the live stream.
    #[serde(rename = "AutoOpenLiveStream", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub auto_open_live_stream: Option<Option<bool>>,
    /// Gets or sets a value indicating whether always burn in subtitles when transcoding.
    #[serde(rename = "AlwaysBurnInSubtitleWhenTranscoding", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub always_burn_in_subtitle_when_transcoding: Option<Option<bool>>,
}

impl PlaybackInfoDto {
    /// Plabyback info dto.
    pub fn new() -> PlaybackInfoDto {
        PlaybackInfoDto {
            user_id: None,
            max_streaming_bitrate: None,
            start_time_ticks: None,
            audio_stream_index: None,
            subtitle_stream_index: None,
            max_audio_channels: None,
            media_source_id: None,
            live_stream_id: None,
            device_profile: None,
            enable_direct_play: None,
            enable_direct_stream: None,
            enable_transcoding: None,
            allow_video_stream_copy: None,
            allow_audio_stream_copy: None,
            auto_open_live_stream: None,
            always_burn_in_subtitle_when_transcoding: None,
        }
    }
}

