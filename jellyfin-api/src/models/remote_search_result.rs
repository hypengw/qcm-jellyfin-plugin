/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RemoteSearchResult {
    /// Gets or sets the name.
    #[serde(rename = "Name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    /// Gets or sets the provider ids.
    #[serde(rename = "ProviderIds", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub provider_ids: Option<Option<std::collections::HashMap<String, String>>>,
    /// Gets or sets the year.
    #[serde(rename = "ProductionYear", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub production_year: Option<Option<i32>>,
    #[serde(rename = "IndexNumber", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub index_number: Option<Option<i32>>,
    #[serde(rename = "IndexNumberEnd", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub index_number_end: Option<Option<i32>>,
    #[serde(rename = "ParentIndexNumber", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub parent_index_number: Option<Option<i32>>,
    #[serde(rename = "PremiereDate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub premiere_date: Option<Option<String>>,
    #[serde(rename = "ImageUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub image_url: Option<Option<String>>,
    #[serde(rename = "SearchProviderName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub search_provider_name: Option<Option<String>>,
    #[serde(rename = "Overview", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub overview: Option<Option<String>>,
    #[serde(rename = "AlbumArtist", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub album_artist: Option<Option<Box<models::RemoteSearchResult>>>,
    #[serde(rename = "Artists", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub artists: Option<Option<Vec<models::RemoteSearchResult>>>,
}

impl RemoteSearchResult {
    pub fn new() -> RemoteSearchResult {
        RemoteSearchResult {
            name: None,
            provider_ids: None,
            production_year: None,
            index_number: None,
            index_number_end: None,
            parent_index_number: None,
            premiere_date: None,
            image_url: None,
            search_provider_name: None,
            overview: None,
            album_artist: None,
            artists: None,
        }
    }
}

