/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// SessionMessageType : The different kinds of messages that are used in the WebSocket api.
/// The different kinds of messages that are used in the WebSocket api.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SessionMessageType {
    #[serde(rename = "ForceKeepAlive")]
    ForceKeepAlive,
    #[serde(rename = "GeneralCommand")]
    GeneralCommand,
    #[serde(rename = "UserDataChanged")]
    UserDataChanged,
    #[serde(rename = "Sessions")]
    Sessions,
    #[serde(rename = "Play")]
    Play,
    #[serde(rename = "SyncPlayCommand")]
    SyncPlayCommand,
    #[serde(rename = "SyncPlayGroupUpdate")]
    SyncPlayGroupUpdate,
    #[serde(rename = "Playstate")]
    Playstate,
    #[serde(rename = "RestartRequired")]
    RestartRequired,
    #[serde(rename = "ServerShuttingDown")]
    ServerShuttingDown,
    #[serde(rename = "ServerRestarting")]
    ServerRestarting,
    #[serde(rename = "LibraryChanged")]
    LibraryChanged,
    #[serde(rename = "UserDeleted")]
    UserDeleted,
    #[serde(rename = "UserUpdated")]
    UserUpdated,
    #[serde(rename = "SeriesTimerCreated")]
    SeriesTimerCreated,
    #[serde(rename = "TimerCreated")]
    TimerCreated,
    #[serde(rename = "SeriesTimerCancelled")]
    SeriesTimerCancelled,
    #[serde(rename = "TimerCancelled")]
    TimerCancelled,
    #[serde(rename = "RefreshProgress")]
    RefreshProgress,
    #[serde(rename = "ScheduledTaskEnded")]
    ScheduledTaskEnded,
    #[serde(rename = "PackageInstallationCancelled")]
    PackageInstallationCancelled,
    #[serde(rename = "PackageInstallationFailed")]
    PackageInstallationFailed,
    #[serde(rename = "PackageInstallationCompleted")]
    PackageInstallationCompleted,
    #[serde(rename = "PackageInstalling")]
    PackageInstalling,
    #[serde(rename = "PackageUninstalled")]
    PackageUninstalled,
    #[serde(rename = "ActivityLogEntry")]
    ActivityLogEntry,
    #[serde(rename = "ScheduledTasksInfo")]
    ScheduledTasksInfo,
    #[serde(rename = "ActivityLogEntryStart")]
    ActivityLogEntryStart,
    #[serde(rename = "ActivityLogEntryStop")]
    ActivityLogEntryStop,
    #[serde(rename = "SessionsStart")]
    SessionsStart,
    #[serde(rename = "SessionsStop")]
    SessionsStop,
    #[serde(rename = "ScheduledTasksInfoStart")]
    ScheduledTasksInfoStart,
    #[serde(rename = "ScheduledTasksInfoStop")]
    ScheduledTasksInfoStop,
    #[serde(rename = "KeepAlive")]
    KeepAlive,

}

impl std::fmt::Display for SessionMessageType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::ForceKeepAlive => write!(f, "ForceKeepAlive"),
            Self::GeneralCommand => write!(f, "GeneralCommand"),
            Self::UserDataChanged => write!(f, "UserDataChanged"),
            Self::Sessions => write!(f, "Sessions"),
            Self::Play => write!(f, "Play"),
            Self::SyncPlayCommand => write!(f, "SyncPlayCommand"),
            Self::SyncPlayGroupUpdate => write!(f, "SyncPlayGroupUpdate"),
            Self::Playstate => write!(f, "Playstate"),
            Self::RestartRequired => write!(f, "RestartRequired"),
            Self::ServerShuttingDown => write!(f, "ServerShuttingDown"),
            Self::ServerRestarting => write!(f, "ServerRestarting"),
            Self::LibraryChanged => write!(f, "LibraryChanged"),
            Self::UserDeleted => write!(f, "UserDeleted"),
            Self::UserUpdated => write!(f, "UserUpdated"),
            Self::SeriesTimerCreated => write!(f, "SeriesTimerCreated"),
            Self::TimerCreated => write!(f, "TimerCreated"),
            Self::SeriesTimerCancelled => write!(f, "SeriesTimerCancelled"),
            Self::TimerCancelled => write!(f, "TimerCancelled"),
            Self::RefreshProgress => write!(f, "RefreshProgress"),
            Self::ScheduledTaskEnded => write!(f, "ScheduledTaskEnded"),
            Self::PackageInstallationCancelled => write!(f, "PackageInstallationCancelled"),
            Self::PackageInstallationFailed => write!(f, "PackageInstallationFailed"),
            Self::PackageInstallationCompleted => write!(f, "PackageInstallationCompleted"),
            Self::PackageInstalling => write!(f, "PackageInstalling"),
            Self::PackageUninstalled => write!(f, "PackageUninstalled"),
            Self::ActivityLogEntry => write!(f, "ActivityLogEntry"),
            Self::ScheduledTasksInfo => write!(f, "ScheduledTasksInfo"),
            Self::ActivityLogEntryStart => write!(f, "ActivityLogEntryStart"),
            Self::ActivityLogEntryStop => write!(f, "ActivityLogEntryStop"),
            Self::SessionsStart => write!(f, "SessionsStart"),
            Self::SessionsStop => write!(f, "SessionsStop"),
            Self::ScheduledTasksInfoStart => write!(f, "ScheduledTasksInfoStart"),
            Self::ScheduledTasksInfoStop => write!(f, "ScheduledTasksInfoStop"),
            Self::KeepAlive => write!(f, "KeepAlive"),
        }
    }
}

impl Default for SessionMessageType {
    fn default() -> SessionMessageType {
        Self::ForceKeepAlive
    }
}

