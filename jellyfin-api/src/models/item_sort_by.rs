/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ItemSortBy : These represent sort orders.
/// These represent sort orders.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ItemSortBy {
    #[serde(rename = "Default")]
    Default,
    #[serde(rename = "AiredEpisodeOrder")]
    AiredEpisodeOrder,
    #[serde(rename = "Album")]
    Album,
    #[serde(rename = "AlbumArtist")]
    AlbumArtist,
    #[serde(rename = "Artist")]
    Artist,
    #[serde(rename = "DateCreated")]
    DateCreated,
    #[serde(rename = "OfficialRating")]
    OfficialRating,
    #[serde(rename = "DatePlayed")]
    DatePlayed,
    #[serde(rename = "PremiereDate")]
    PremiereDate,
    #[serde(rename = "StartDate")]
    StartDate,
    #[serde(rename = "SortName")]
    SortName,
    #[serde(rename = "Name")]
    Name,
    #[serde(rename = "Random")]
    Random,
    #[serde(rename = "Runtime")]
    Runtime,
    #[serde(rename = "CommunityRating")]
    CommunityRating,
    #[serde(rename = "ProductionYear")]
    ProductionYear,
    #[serde(rename = "PlayCount")]
    PlayCount,
    #[serde(rename = "CriticRating")]
    CriticRating,
    #[serde(rename = "IsFolder")]
    IsFolder,
    #[serde(rename = "IsUnplayed")]
    IsUnplayed,
    #[serde(rename = "IsPlayed")]
    IsPlayed,
    #[serde(rename = "SeriesSortName")]
    SeriesSortName,
    #[serde(rename = "VideoBitRate")]
    VideoBitRate,
    #[serde(rename = "AirTime")]
    AirTime,
    #[serde(rename = "Studio")]
    Studio,
    #[serde(rename = "IsFavoriteOrLiked")]
    IsFavoriteOrLiked,
    #[serde(rename = "DateLastContentAdded")]
    DateLastContentAdded,
    #[serde(rename = "SeriesDatePlayed")]
    SeriesDatePlayed,
    #[serde(rename = "ParentIndexNumber")]
    ParentIndexNumber,
    #[serde(rename = "IndexNumber")]
    IndexNumber,
    #[serde(rename = "SimilarityScore")]
    SimilarityScore,
    #[serde(rename = "SearchScore")]
    SearchScore,

}

impl std::fmt::Display for ItemSortBy {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Default => write!(f, "Default"),
            Self::AiredEpisodeOrder => write!(f, "AiredEpisodeOrder"),
            Self::Album => write!(f, "Album"),
            Self::AlbumArtist => write!(f, "AlbumArtist"),
            Self::Artist => write!(f, "Artist"),
            Self::DateCreated => write!(f, "DateCreated"),
            Self::OfficialRating => write!(f, "OfficialRating"),
            Self::DatePlayed => write!(f, "DatePlayed"),
            Self::PremiereDate => write!(f, "PremiereDate"),
            Self::StartDate => write!(f, "StartDate"),
            Self::SortName => write!(f, "SortName"),
            Self::Name => write!(f, "Name"),
            Self::Random => write!(f, "Random"),
            Self::Runtime => write!(f, "Runtime"),
            Self::CommunityRating => write!(f, "CommunityRating"),
            Self::ProductionYear => write!(f, "ProductionYear"),
            Self::PlayCount => write!(f, "PlayCount"),
            Self::CriticRating => write!(f, "CriticRating"),
            Self::IsFolder => write!(f, "IsFolder"),
            Self::IsUnplayed => write!(f, "IsUnplayed"),
            Self::IsPlayed => write!(f, "IsPlayed"),
            Self::SeriesSortName => write!(f, "SeriesSortName"),
            Self::VideoBitRate => write!(f, "VideoBitRate"),
            Self::AirTime => write!(f, "AirTime"),
            Self::Studio => write!(f, "Studio"),
            Self::IsFavoriteOrLiked => write!(f, "IsFavoriteOrLiked"),
            Self::DateLastContentAdded => write!(f, "DateLastContentAdded"),
            Self::SeriesDatePlayed => write!(f, "SeriesDatePlayed"),
            Self::ParentIndexNumber => write!(f, "ParentIndexNumber"),
            Self::IndexNumber => write!(f, "IndexNumber"),
            Self::SimilarityScore => write!(f, "SimilarityScore"),
            Self::SearchScore => write!(f, "SearchScore"),
        }
    }
}

impl Default for ItemSortBy {
    fn default() -> ItemSortBy {
        Self::Default
    }
}

