/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LogLevel {
    #[serde(rename = "Trace")]
    Trace,
    #[serde(rename = "Debug")]
    Debug,
    #[serde(rename = "Information")]
    Information,
    #[serde(rename = "Warning")]
    Warning,
    #[serde(rename = "Error")]
    Error,
    #[serde(rename = "Critical")]
    Critical,
    #[serde(rename = "None")]
    None,

}

impl std::fmt::Display for LogLevel {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Trace => write!(f, "Trace"),
            Self::Debug => write!(f, "Debug"),
            Self::Information => write!(f, "Information"),
            Self::Warning => write!(f, "Warning"),
            Self::Error => write!(f, "Error"),
            Self::Critical => write!(f, "Critical"),
            Self::None => write!(f, "None"),
        }
    }
}

impl Default for LogLevel {
    fn default() -> LogLevel {
        Self::Trace
    }
}

