/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TonemappingAlgorithm : Enum containing tonemapping algorithms.
/// Enum containing tonemapping algorithms.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TonemappingAlgorithm {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "clip")]
    Clip,
    #[serde(rename = "linear")]
    Linear,
    #[serde(rename = "gamma")]
    Gamma,
    #[serde(rename = "reinhard")]
    Reinhard,
    #[serde(rename = "hable")]
    Hable,
    #[serde(rename = "mobius")]
    Mobius,
    #[serde(rename = "bt2390")]
    Bt2390,

}

impl std::fmt::Display for TonemappingAlgorithm {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::None => write!(f, "none"),
            Self::Clip => write!(f, "clip"),
            Self::Linear => write!(f, "linear"),
            Self::Gamma => write!(f, "gamma"),
            Self::Reinhard => write!(f, "reinhard"),
            Self::Hable => write!(f, "hable"),
            Self::Mobius => write!(f, "mobius"),
            Self::Bt2390 => write!(f, "bt2390"),
        }
    }
}

impl Default for TonemappingAlgorithm {
    fn default() -> TonemappingAlgorithm {
        Self::None
    }
}

