/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GroupUpdateType : Enum GroupUpdateType.
/// Enum GroupUpdateType.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum GroupUpdateType {
    #[serde(rename = "UserJoined")]
    UserJoined,
    #[serde(rename = "UserLeft")]
    UserLeft,
    #[serde(rename = "GroupJoined")]
    GroupJoined,
    #[serde(rename = "GroupLeft")]
    GroupLeft,
    #[serde(rename = "StateUpdate")]
    StateUpdate,
    #[serde(rename = "PlayQueue")]
    PlayQueue,
    #[serde(rename = "NotInGroup")]
    NotInGroup,
    #[serde(rename = "GroupDoesNotExist")]
    GroupDoesNotExist,
    #[serde(rename = "CreateGroupDenied")]
    CreateGroupDenied,
    #[serde(rename = "JoinGroupDenied")]
    JoinGroupDenied,
    #[serde(rename = "LibraryAccessDenied")]
    LibraryAccessDenied,

}

impl std::fmt::Display for GroupUpdateType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::UserJoined => write!(f, "UserJoined"),
            Self::UserLeft => write!(f, "UserLeft"),
            Self::GroupJoined => write!(f, "GroupJoined"),
            Self::GroupLeft => write!(f, "GroupLeft"),
            Self::StateUpdate => write!(f, "StateUpdate"),
            Self::PlayQueue => write!(f, "PlayQueue"),
            Self::NotInGroup => write!(f, "NotInGroup"),
            Self::GroupDoesNotExist => write!(f, "GroupDoesNotExist"),
            Self::CreateGroupDenied => write!(f, "CreateGroupDenied"),
            Self::JoinGroupDenied => write!(f, "JoinGroupDenied"),
            Self::LibraryAccessDenied => write!(f, "LibraryAccessDenied"),
        }
    }
}

impl Default for GroupUpdateType {
    fn default() -> GroupUpdateType {
        Self::UserJoined
    }
}

