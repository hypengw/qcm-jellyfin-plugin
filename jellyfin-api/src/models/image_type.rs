/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ImageType : Enum ImageType.
/// Enum ImageType.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ImageType {
    #[serde(rename = "Primary")]
    Primary,
    #[serde(rename = "Art")]
    Art,
    #[serde(rename = "Backdrop")]
    Backdrop,
    #[serde(rename = "Banner")]
    Banner,
    #[serde(rename = "Logo")]
    Logo,
    #[serde(rename = "Thumb")]
    Thumb,
    #[serde(rename = "Disc")]
    Disc,
    #[serde(rename = "Box")]
    Box,
    #[serde(rename = "Screenshot")]
    Screenshot,
    #[serde(rename = "Menu")]
    Menu,
    #[serde(rename = "Chapter")]
    Chapter,
    #[serde(rename = "BoxRear")]
    BoxRear,
    #[serde(rename = "Profile")]
    Profile,

}

impl std::fmt::Display for ImageType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Primary => write!(f, "Primary"),
            Self::Art => write!(f, "Art"),
            Self::Backdrop => write!(f, "Backdrop"),
            Self::Banner => write!(f, "Banner"),
            Self::Logo => write!(f, "Logo"),
            Self::Thumb => write!(f, "Thumb"),
            Self::Disc => write!(f, "Disc"),
            Self::Box => write!(f, "Box"),
            Self::Screenshot => write!(f, "Screenshot"),
            Self::Menu => write!(f, "Menu"),
            Self::Chapter => write!(f, "Chapter"),
            Self::BoxRear => write!(f, "BoxRear"),
            Self::Profile => write!(f, "Profile"),
        }
    }
}

impl Default for ImageType {
    fn default() -> ImageType {
        Self::Primary
    }
}

