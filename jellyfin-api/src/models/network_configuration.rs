/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// NetworkConfiguration : Defines the MediaBrowser.Common.Net.NetworkConfiguration.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkConfiguration {
    /// Gets or sets a value used to specify the URL prefix that your Jellyfin instance can be accessed at.
    #[serde(rename = "BaseUrl", skip_serializing_if = "Option::is_none")]
    pub base_url: Option<String>,
    /// Gets or sets a value indicating whether to use HTTPS.
    #[serde(rename = "EnableHttps", skip_serializing_if = "Option::is_none")]
    pub enable_https: Option<bool>,
    /// Gets or sets a value indicating whether the server should force connections over HTTPS.
    #[serde(rename = "RequireHttps", skip_serializing_if = "Option::is_none")]
    pub require_https: Option<bool>,
    /// Gets or sets the filesystem path of an X.509 certificate to use for SSL.
    #[serde(rename = "CertificatePath", skip_serializing_if = "Option::is_none")]
    pub certificate_path: Option<String>,
    /// Gets or sets the password required to access the X.509 certificate data in the file specified by MediaBrowser.Common.Net.NetworkConfiguration.CertificatePath.
    #[serde(rename = "CertificatePassword", skip_serializing_if = "Option::is_none")]
    pub certificate_password: Option<String>,
    /// Gets or sets the internal HTTP server port.
    #[serde(rename = "InternalHttpPort", skip_serializing_if = "Option::is_none")]
    pub internal_http_port: Option<i32>,
    /// Gets or sets the internal HTTPS server port.
    #[serde(rename = "InternalHttpsPort", skip_serializing_if = "Option::is_none")]
    pub internal_https_port: Option<i32>,
    /// Gets or sets the public HTTP port.
    #[serde(rename = "PublicHttpPort", skip_serializing_if = "Option::is_none")]
    pub public_http_port: Option<i32>,
    /// Gets or sets the public HTTPS port.
    #[serde(rename = "PublicHttpsPort", skip_serializing_if = "Option::is_none")]
    pub public_https_port: Option<i32>,
    /// Gets or sets a value indicating whether Autodiscovery is enabled.
    #[serde(rename = "AutoDiscovery", skip_serializing_if = "Option::is_none")]
    pub auto_discovery: Option<bool>,
    /// Gets or sets a value indicating whether to enable automatic port forwarding.
    #[serde(rename = "EnableUPnP", skip_serializing_if = "Option::is_none")]
    pub enable_upn_p: Option<bool>,
    /// Gets or sets a value indicating whether IPv6 is enabled.
    #[serde(rename = "EnableIPv4", skip_serializing_if = "Option::is_none")]
    pub enable_ipv4: Option<bool>,
    /// Gets or sets a value indicating whether IPv6 is enabled.
    #[serde(rename = "EnableIPv6", skip_serializing_if = "Option::is_none")]
    pub enable_ipv6: Option<bool>,
    /// Gets or sets a value indicating whether access from outside of the LAN is permitted.
    #[serde(rename = "EnableRemoteAccess", skip_serializing_if = "Option::is_none")]
    pub enable_remote_access: Option<bool>,
    /// Gets or sets the subnets that are deemed to make up the LAN.
    #[serde(rename = "LocalNetworkSubnets", skip_serializing_if = "Option::is_none")]
    pub local_network_subnets: Option<Vec<String>>,
    /// Gets or sets the interface addresses which Jellyfin will bind to. If empty, all interfaces will be used.
    #[serde(rename = "LocalNetworkAddresses", skip_serializing_if = "Option::is_none")]
    pub local_network_addresses: Option<Vec<String>>,
    /// Gets or sets the known proxies.
    #[serde(rename = "KnownProxies", skip_serializing_if = "Option::is_none")]
    pub known_proxies: Option<Vec<String>>,
    /// Gets or sets a value indicating whether address names that match MediaBrowser.Common.Net.NetworkConfiguration.VirtualInterfaceNames should be ignored for the purposes of binding.
    #[serde(rename = "IgnoreVirtualInterfaces", skip_serializing_if = "Option::is_none")]
    pub ignore_virtual_interfaces: Option<bool>,
    /// Gets or sets a value indicating the interface name prefixes that should be ignored. The list can be comma separated and values are case-insensitive. <seealso cref=\"P:MediaBrowser.Common.Net.NetworkConfiguration.IgnoreVirtualInterfaces\" />.
    #[serde(rename = "VirtualInterfaceNames", skip_serializing_if = "Option::is_none")]
    pub virtual_interface_names: Option<Vec<String>>,
    /// Gets or sets a value indicating whether the published server uri is based on information in HTTP requests.
    #[serde(rename = "EnablePublishedServerUriByRequest", skip_serializing_if = "Option::is_none")]
    pub enable_published_server_uri_by_request: Option<bool>,
    /// Gets or sets the PublishedServerUriBySubnet  Gets or sets PublishedServerUri to advertise for specific subnets.
    #[serde(rename = "PublishedServerUriBySubnet", skip_serializing_if = "Option::is_none")]
    pub published_server_uri_by_subnet: Option<Vec<String>>,
    /// Gets or sets the filter for remote IP connectivity. Used in conjunction with <seealso cref=\"P:MediaBrowser.Common.Net.NetworkConfiguration.IsRemoteIPFilterBlacklist\" />.
    #[serde(rename = "RemoteIPFilter", skip_serializing_if = "Option::is_none")]
    pub remote_ip_filter: Option<Vec<String>>,
    /// Gets or sets a value indicating whether <seealso cref=\"P:MediaBrowser.Common.Net.NetworkConfiguration.RemoteIPFilter\" /> contains a blacklist or a whitelist. Default is a whitelist.
    #[serde(rename = "IsRemoteIPFilterBlacklist", skip_serializing_if = "Option::is_none")]
    pub is_remote_ip_filter_blacklist: Option<bool>,
}

impl NetworkConfiguration {
    /// Defines the MediaBrowser.Common.Net.NetworkConfiguration.
    pub fn new() -> NetworkConfiguration {
        NetworkConfiguration {
            base_url: None,
            enable_https: None,
            require_https: None,
            certificate_path: None,
            certificate_password: None,
            internal_http_port: None,
            internal_https_port: None,
            public_http_port: None,
            public_https_port: None,
            auto_discovery: None,
            enable_upn_p: None,
            enable_ipv4: None,
            enable_ipv6: None,
            enable_remote_access: None,
            local_network_subnets: None,
            local_network_addresses: None,
            known_proxies: None,
            ignore_virtual_interfaces: None,
            virtual_interface_names: None,
            enable_published_server_uri_by_request: None,
            published_server_uri_by_subnet: None,
            remote_ip_filter: None,
            is_remote_ip_filter_blacklist: None,
        }
    }
}

