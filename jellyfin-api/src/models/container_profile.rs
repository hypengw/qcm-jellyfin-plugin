/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ContainerProfile : Defines the MediaBrowser.Model.Dlna.ContainerProfile.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContainerProfile {
    /// Gets or sets the MediaBrowser.Model.Dlna.DlnaProfileType which this container must meet.
    #[serde(rename = "Type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::DlnaProfileType>,
    /// Gets or sets the list of MediaBrowser.Model.Dlna.ProfileCondition which this container will be applied to.
    #[serde(rename = "Conditions", skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<models::ProfileCondition>>,
    /// Gets or sets the container(s) which this container must meet.
    #[serde(rename = "Container", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub container: Option<Option<String>>,
    /// Gets or sets the sub container(s) which this container must meet.
    #[serde(rename = "SubContainer", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sub_container: Option<Option<String>>,
}

impl ContainerProfile {
    /// Defines the MediaBrowser.Model.Dlna.ContainerProfile.
    pub fn new() -> ContainerProfile {
        ContainerProfile {
            r#type: None,
            conditions: None,
            container: None,
            sub_container: None,
        }
    }
}

