/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PlaybackStopInfo : Class PlaybackStopInfo.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlaybackStopInfo {
    /// Gets or sets the item.
    #[serde(rename = "Item", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub item: Option<Option<Box<models::BaseItemDto>>>,
    /// Gets or sets the item identifier.
    #[serde(rename = "ItemId", skip_serializing_if = "Option::is_none")]
    pub item_id: Option<uuid::Uuid>,
    /// Gets or sets the session id.
    #[serde(rename = "SessionId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub session_id: Option<Option<String>>,
    /// Gets or sets the media version identifier.
    #[serde(rename = "MediaSourceId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub media_source_id: Option<Option<String>>,
    /// Gets or sets the position ticks.
    #[serde(rename = "PositionTicks", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub position_ticks: Option<Option<i64>>,
    /// Gets or sets the live stream identifier.
    #[serde(rename = "LiveStreamId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub live_stream_id: Option<Option<String>>,
    /// Gets or sets the play session identifier.
    #[serde(rename = "PlaySessionId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub play_session_id: Option<Option<String>>,
    /// Gets or sets a value indicating whether this MediaBrowser.Model.Session.PlaybackStopInfo is failed.
    #[serde(rename = "Failed", skip_serializing_if = "Option::is_none")]
    pub failed: Option<bool>,
    #[serde(rename = "NextMediaType", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub next_media_type: Option<Option<String>>,
    #[serde(rename = "PlaylistItemId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub playlist_item_id: Option<Option<String>>,
    #[serde(rename = "NowPlayingQueue", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub now_playing_queue: Option<Option<Vec<models::QueueItem>>>,
}

impl PlaybackStopInfo {
    /// Class PlaybackStopInfo.
    pub fn new() -> PlaybackStopInfo {
        PlaybackStopInfo {
            item: None,
            item_id: None,
            session_id: None,
            media_source_id: None,
            position_ticks: None,
            live_stream_id: None,
            play_session_id: None,
            failed: None,
            next_media_type: None,
            playlist_item_id: None,
            now_playing_queue: None,
        }
    }
}

