/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TranscodingInfo : Class holding information on a runnning transcode.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TranscodingInfo {
    /// Gets or sets the thread count used for encoding.
    #[serde(rename = "AudioCodec", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub audio_codec: Option<Option<String>>,
    /// Gets or sets the thread count used for encoding.
    #[serde(rename = "VideoCodec", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub video_codec: Option<Option<String>>,
    /// Gets or sets the thread count used for encoding.
    #[serde(rename = "Container", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub container: Option<Option<String>>,
    /// Gets or sets a value indicating whether the video is passed through.
    #[serde(rename = "IsVideoDirect", skip_serializing_if = "Option::is_none")]
    pub is_video_direct: Option<bool>,
    /// Gets or sets a value indicating whether the audio is passed through.
    #[serde(rename = "IsAudioDirect", skip_serializing_if = "Option::is_none")]
    pub is_audio_direct: Option<bool>,
    /// Gets or sets the bitrate.
    #[serde(rename = "Bitrate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bitrate: Option<Option<i32>>,
    /// Gets or sets the framerate.
    #[serde(rename = "Framerate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub framerate: Option<Option<f32>>,
    /// Gets or sets the completion percentage.
    #[serde(rename = "CompletionPercentage", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub completion_percentage: Option<Option<f64>>,
    /// Gets or sets the video width.
    #[serde(rename = "Width", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub width: Option<Option<i32>>,
    /// Gets or sets the video height.
    #[serde(rename = "Height", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub height: Option<Option<i32>>,
    /// Gets or sets the audio channels.
    #[serde(rename = "AudioChannels", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub audio_channels: Option<Option<i32>>,
    /// Gets or sets the hardware acceleration type.
    #[serde(rename = "HardwareAccelerationType", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hardware_acceleration_type: Option<Option<models::HardwareAccelerationType>>,
    /// Gets or sets the transcode reasons.
    #[serde(rename = "TranscodeReasons", skip_serializing_if = "Option::is_none")]
    pub transcode_reasons: Option<Vec<TranscodeReasons>>,
}

impl TranscodingInfo {
    /// Class holding information on a runnning transcode.
    pub fn new() -> TranscodingInfo {
        TranscodingInfo {
            audio_codec: None,
            video_codec: None,
            container: None,
            is_video_direct: None,
            is_audio_direct: None,
            bitrate: None,
            framerate: None,
            completion_percentage: None,
            width: None,
            height: None,
            audio_channels: None,
            hardware_acceleration_type: None,
            transcode_reasons: None,
        }
    }
}
/// Gets or sets the transcode reasons.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TranscodeReasons {
}

impl Default for TranscodeReasons {
    fn default() -> TranscodeReasons {
        Self::
    }
}

