/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// VirtualFolderInfo : Used to hold information about a user's list of configured virtual folders.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VirtualFolderInfo {
    /// Gets or sets the name.
    #[serde(rename = "Name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    /// Gets or sets the locations.
    #[serde(rename = "Locations", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub locations: Option<Option<Vec<String>>>,
    /// Gets or sets the type of the collection.
    #[serde(rename = "CollectionType", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub collection_type: Option<Option<models::CollectionTypeOptions>>,
    #[serde(rename = "LibraryOptions", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub library_options: Option<Option<Box<models::LibraryOptions>>>,
    /// Gets or sets the item identifier.
    #[serde(rename = "ItemId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub item_id: Option<Option<String>>,
    /// Gets or sets the primary image item identifier.
    #[serde(rename = "PrimaryImageItemId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub primary_image_item_id: Option<Option<String>>,
    #[serde(rename = "RefreshProgress", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub refresh_progress: Option<Option<f64>>,
    #[serde(rename = "RefreshStatus", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub refresh_status: Option<Option<String>>,
}

impl VirtualFolderInfo {
    /// Used to hold information about a user's list of configured virtual folders.
    pub fn new() -> VirtualFolderInfo {
        VirtualFolderInfo {
            name: None,
            locations: None,
            collection_type: None,
            library_options: None,
            item_id: None,
            primary_image_item_id: None,
            refresh_progress: None,
            refresh_status: None,
        }
    }
}

