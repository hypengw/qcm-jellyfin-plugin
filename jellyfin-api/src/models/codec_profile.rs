/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CodecProfile : Defines the MediaBrowser.Model.Dlna.CodecProfile.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CodecProfile {
    /// Gets or sets the MediaBrowser.Model.Dlna.CodecType which this container must meet.
    #[serde(rename = "Type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::CodecType>,
    /// Gets or sets the list of MediaBrowser.Model.Dlna.ProfileCondition which this profile must meet.
    #[serde(rename = "Conditions", skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<models::ProfileCondition>>,
    /// Gets or sets the list of MediaBrowser.Model.Dlna.ProfileCondition to apply if this profile is met.
    #[serde(rename = "ApplyConditions", skip_serializing_if = "Option::is_none")]
    pub apply_conditions: Option<Vec<models::ProfileCondition>>,
    /// Gets or sets the codec(s) that this profile applies to.
    #[serde(rename = "Codec", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub codec: Option<Option<String>>,
    /// Gets or sets the container(s) which this profile will be applied to.
    #[serde(rename = "Container", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub container: Option<Option<String>>,
    /// Gets or sets the sub-container(s) which this profile will be applied to.
    #[serde(rename = "SubContainer", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sub_container: Option<Option<String>>,
}

impl CodecProfile {
    /// Defines the MediaBrowser.Model.Dlna.CodecProfile.
    pub fn new() -> CodecProfile {
        CodecProfile {
            r#type: None,
            conditions: None,
            apply_conditions: None,
            codec: None,
            container: None,
            sub_container: None,
        }
    }
}

