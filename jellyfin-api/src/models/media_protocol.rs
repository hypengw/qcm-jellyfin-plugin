/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MediaProtocol {
    #[serde(rename = "File")]
    File,
    #[serde(rename = "Http")]
    Http,
    #[serde(rename = "Rtmp")]
    Rtmp,
    #[serde(rename = "Rtsp")]
    Rtsp,
    #[serde(rename = "Udp")]
    Udp,
    #[serde(rename = "Rtp")]
    Rtp,
    #[serde(rename = "Ftp")]
    Ftp,

}

impl std::fmt::Display for MediaProtocol {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::File => write!(f, "File"),
            Self::Http => write!(f, "Http"),
            Self::Rtmp => write!(f, "Rtmp"),
            Self::Rtsp => write!(f, "Rtsp"),
            Self::Udp => write!(f, "Udp"),
            Self::Rtp => write!(f, "Rtp"),
            Self::Ftp => write!(f, "Ftp"),
        }
    }
}

impl Default for MediaProtocol {
    fn default() -> MediaProtocol {
        Self::File
    }
}

