/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MediaStreamType : Enum MediaStreamType.
/// Enum MediaStreamType.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MediaStreamType {
    #[serde(rename = "Audio")]
    Audio,
    #[serde(rename = "Video")]
    Video,
    #[serde(rename = "Subtitle")]
    Subtitle,
    #[serde(rename = "EmbeddedImage")]
    EmbeddedImage,
    #[serde(rename = "Data")]
    Data,
    #[serde(rename = "Lyric")]
    Lyric,

}

impl std::fmt::Display for MediaStreamType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Audio => write!(f, "Audio"),
            Self::Video => write!(f, "Video"),
            Self::Subtitle => write!(f, "Subtitle"),
            Self::EmbeddedImage => write!(f, "EmbeddedImage"),
            Self::Data => write!(f, "Data"),
            Self::Lyric => write!(f, "Lyric"),
        }
    }
}

impl Default for MediaStreamType {
    fn default() -> MediaStreamType {
        Self::Audio
    }
}

