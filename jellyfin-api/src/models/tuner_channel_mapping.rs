/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TunerChannelMapping {
    #[serde(rename = "Name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    #[serde(rename = "ProviderChannelName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub provider_channel_name: Option<Option<String>>,
    #[serde(rename = "ProviderChannelId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub provider_channel_id: Option<Option<String>>,
    #[serde(rename = "Id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<String>>,
}

impl TunerChannelMapping {
    pub fn new() -> TunerChannelMapping {
        TunerChannelMapping {
            name: None,
            provider_channel_name: None,
            provider_channel_id: None,
            id: None,
        }
    }
}

