/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RemoteSubtitleInfo {
    #[serde(rename = "ThreeLetterISOLanguageName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub three_letter_iso_language_name: Option<Option<String>>,
    #[serde(rename = "Id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<String>>,
    #[serde(rename = "ProviderName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub provider_name: Option<Option<String>>,
    #[serde(rename = "Name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    #[serde(rename = "Format", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub format: Option<Option<String>>,
    #[serde(rename = "Author", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub author: Option<Option<String>>,
    #[serde(rename = "Comment", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub comment: Option<Option<String>>,
    #[serde(rename = "DateCreated", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<Option<String>>,
    #[serde(rename = "CommunityRating", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub community_rating: Option<Option<f32>>,
    #[serde(rename = "FrameRate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub frame_rate: Option<Option<f32>>,
    #[serde(rename = "DownloadCount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub download_count: Option<Option<i32>>,
    #[serde(rename = "IsHashMatch", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_hash_match: Option<Option<bool>>,
    #[serde(rename = "AiTranslated", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ai_translated: Option<Option<bool>>,
    #[serde(rename = "MachineTranslated", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub machine_translated: Option<Option<bool>>,
    #[serde(rename = "Forced", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub forced: Option<Option<bool>>,
    #[serde(rename = "HearingImpaired", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hearing_impaired: Option<Option<bool>>,
}

impl RemoteSubtitleInfo {
    pub fn new() -> RemoteSubtitleInfo {
        RemoteSubtitleInfo {
            three_letter_iso_language_name: None,
            id: None,
            provider_name: None,
            name: None,
            format: None,
            author: None,
            comment: None,
            date_created: None,
            community_rating: None,
            frame_rate: None,
            download_count: None,
            is_hash_match: None,
            ai_translated: None,
            machine_translated: None,
            forced: None,
            hearing_impaired: None,
        }
    }
}

