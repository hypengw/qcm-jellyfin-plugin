/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TranscodingProfile : A class for transcoding profile information.  Note for client developers: Conditions defined in MediaBrowser.Model.Dlna.CodecProfile has higher priority and can override values defined here.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TranscodingProfile {
    /// Gets or sets the container.
    #[serde(rename = "Container", skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    /// Gets or sets the DLNA profile type.
    #[serde(rename = "Type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::DlnaProfileType>,
    /// Gets or sets the video codec.
    #[serde(rename = "VideoCodec", skip_serializing_if = "Option::is_none")]
    pub video_codec: Option<String>,
    /// Gets or sets the audio codec.
    #[serde(rename = "AudioCodec", skip_serializing_if = "Option::is_none")]
    pub audio_codec: Option<String>,
    /// Media streaming protocol.  Lowercase for backwards compatibility.
    #[serde(rename = "Protocol", skip_serializing_if = "Option::is_none")]
    pub protocol: Option<models::MediaStreamProtocol>,
    /// Gets or sets a value indicating whether the content length should be estimated.
    #[serde(rename = "EstimateContentLength", skip_serializing_if = "Option::is_none")]
    pub estimate_content_length: Option<bool>,
    /// Gets or sets a value indicating whether M2TS mode is enabled.
    #[serde(rename = "EnableMpegtsM2TsMode", skip_serializing_if = "Option::is_none")]
    pub enable_mpegts_m2_ts_mode: Option<bool>,
    /// Gets or sets the transcoding seek info mode.
    #[serde(rename = "TranscodeSeekInfo", skip_serializing_if = "Option::is_none")]
    pub transcode_seek_info: Option<models::TranscodeSeekInfo>,
    /// Gets or sets a value indicating whether timestamps should be copied.
    #[serde(rename = "CopyTimestamps", skip_serializing_if = "Option::is_none")]
    pub copy_timestamps: Option<bool>,
    /// Gets or sets the encoding context.
    #[serde(rename = "Context", skip_serializing_if = "Option::is_none")]
    pub context: Option<models::EncodingContext>,
    /// Gets or sets a value indicating whether subtitles are allowed in the manifest.
    #[serde(rename = "EnableSubtitlesInManifest", skip_serializing_if = "Option::is_none")]
    pub enable_subtitles_in_manifest: Option<bool>,
    /// Gets or sets the maximum audio channels.
    #[serde(rename = "MaxAudioChannels", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_audio_channels: Option<Option<String>>,
    /// Gets or sets the minimum amount of segments.
    #[serde(rename = "MinSegments", skip_serializing_if = "Option::is_none")]
    pub min_segments: Option<i32>,
    /// Gets or sets the segment length.
    #[serde(rename = "SegmentLength", skip_serializing_if = "Option::is_none")]
    pub segment_length: Option<i32>,
    /// Gets or sets a value indicating whether breaking the video stream on non-keyframes is supported.
    #[serde(rename = "BreakOnNonKeyFrames", skip_serializing_if = "Option::is_none")]
    pub break_on_non_key_frames: Option<bool>,
    /// Gets or sets the profile conditions.
    #[serde(rename = "Conditions", skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<models::ProfileCondition>>,
    /// Gets or sets a value indicating whether variable bitrate encoding is supported.
    #[serde(rename = "EnableAudioVbrEncoding", skip_serializing_if = "Option::is_none")]
    pub enable_audio_vbr_encoding: Option<bool>,
}

impl TranscodingProfile {
    /// A class for transcoding profile information.  Note for client developers: Conditions defined in MediaBrowser.Model.Dlna.CodecProfile has higher priority and can override values defined here.
    pub fn new() -> TranscodingProfile {
        TranscodingProfile {
            container: None,
            r#type: None,
            video_codec: None,
            audio_codec: None,
            protocol: None,
            estimate_content_length: None,
            enable_mpegts_m2_ts_mode: None,
            transcode_seek_info: None,
            copy_timestamps: None,
            context: None,
            enable_subtitles_in_manifest: None,
            max_audio_channels: None,
            min_segments: None,
            segment_length: None,
            break_on_non_key_frames: None,
            conditions: None,
            enable_audio_vbr_encoding: None,
        }
    }
}

