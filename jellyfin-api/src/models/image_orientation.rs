/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ImageOrientation {
    #[serde(rename = "TopLeft")]
    TopLeft,
    #[serde(rename = "TopRight")]
    TopRight,
    #[serde(rename = "BottomRight")]
    BottomRight,
    #[serde(rename = "BottomLeft")]
    BottomLeft,
    #[serde(rename = "LeftTop")]
    LeftTop,
    #[serde(rename = "RightTop")]
    RightTop,
    #[serde(rename = "RightBottom")]
    RightBottom,
    #[serde(rename = "LeftBottom")]
    LeftBottom,

}

impl std::fmt::Display for ImageOrientation {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::TopLeft => write!(f, "TopLeft"),
            Self::TopRight => write!(f, "TopRight"),
            Self::BottomRight => write!(f, "BottomRight"),
            Self::BottomLeft => write!(f, "BottomLeft"),
            Self::LeftTop => write!(f, "LeftTop"),
            Self::RightTop => write!(f, "RightTop"),
            Self::RightBottom => write!(f, "RightBottom"),
            Self::LeftBottom => write!(f, "LeftBottom"),
        }
    }
}

impl Default for ImageOrientation {
    fn default() -> ImageOrientation {
        Self::TopLeft
    }
}

