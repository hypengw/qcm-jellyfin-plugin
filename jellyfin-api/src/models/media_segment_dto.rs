/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MediaSegmentDto : Api model for MediaSegment's.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MediaSegmentDto {
    /// Gets or sets the id of the media segment.
    #[serde(rename = "Id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    /// Gets or sets the id of the associated item.
    #[serde(rename = "ItemId", skip_serializing_if = "Option::is_none")]
    pub item_id: Option<uuid::Uuid>,
    /// Defines the types of content an individual Jellyfin.Data.Entities.MediaSegment represents.
    #[serde(rename = "Type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::MediaSegmentType>,
    /// Gets or sets the start of the segment.
    #[serde(rename = "StartTicks", skip_serializing_if = "Option::is_none")]
    pub start_ticks: Option<i64>,
    /// Gets or sets the end of the segment.
    #[serde(rename = "EndTicks", skip_serializing_if = "Option::is_none")]
    pub end_ticks: Option<i64>,
}

impl MediaSegmentDto {
    /// Api model for MediaSegment's.
    pub fn new() -> MediaSegmentDto {
        MediaSegmentDto {
            id: None,
            item_id: None,
            r#type: None,
            start_ticks: None,
            end_ticks: None,
        }
    }
}

