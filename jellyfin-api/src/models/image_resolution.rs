/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ImageResolution : Enum ImageResolution.
/// Enum ImageResolution.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ImageResolution {
    #[serde(rename = "MatchSource")]
    MatchSource,
    #[serde(rename = "P144")]
    P144,
    #[serde(rename = "P240")]
    P240,
    #[serde(rename = "P360")]
    P360,
    #[serde(rename = "P480")]
    P480,
    #[serde(rename = "P720")]
    P720,
    #[serde(rename = "P1080")]
    P1080,
    #[serde(rename = "P1440")]
    P1440,
    #[serde(rename = "P2160")]
    P2160,

}

impl std::fmt::Display for ImageResolution {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::MatchSource => write!(f, "MatchSource"),
            Self::P144 => write!(f, "P144"),
            Self::P240 => write!(f, "P240"),
            Self::P360 => write!(f, "P360"),
            Self::P480 => write!(f, "P480"),
            Self::P720 => write!(f, "P720"),
            Self::P1080 => write!(f, "P1080"),
            Self::P1440 => write!(f, "P1440"),
            Self::P2160 => write!(f, "P2160"),
        }
    }
}

impl Default for ImageResolution {
    fn default() -> ImageResolution {
        Self::MatchSource
    }
}

