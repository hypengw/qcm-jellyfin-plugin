/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PlaybackProgressInfo : Class PlaybackProgressInfo.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlaybackProgressInfo {
    /// Gets or sets a value indicating whether this instance can seek.
    #[serde(rename = "CanSeek", skip_serializing_if = "Option::is_none")]
    pub can_seek: Option<bool>,
    /// Gets or sets the item.
    #[serde(rename = "Item", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub item: Option<Option<Box<models::BaseItemDto>>>,
    /// Gets or sets the item identifier.
    #[serde(rename = "ItemId", skip_serializing_if = "Option::is_none")]
    pub item_id: Option<uuid::Uuid>,
    /// Gets or sets the session id.
    #[serde(rename = "SessionId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub session_id: Option<Option<String>>,
    /// Gets or sets the media version identifier.
    #[serde(rename = "MediaSourceId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub media_source_id: Option<Option<String>>,
    /// Gets or sets the index of the audio stream.
    #[serde(rename = "AudioStreamIndex", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub audio_stream_index: Option<Option<i32>>,
    /// Gets or sets the index of the subtitle stream.
    #[serde(rename = "SubtitleStreamIndex", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub subtitle_stream_index: Option<Option<i32>>,
    /// Gets or sets a value indicating whether this instance is paused.
    #[serde(rename = "IsPaused", skip_serializing_if = "Option::is_none")]
    pub is_paused: Option<bool>,
    /// Gets or sets a value indicating whether this instance is muted.
    #[serde(rename = "IsMuted", skip_serializing_if = "Option::is_none")]
    pub is_muted: Option<bool>,
    /// Gets or sets the position ticks.
    #[serde(rename = "PositionTicks", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub position_ticks: Option<Option<i64>>,
    #[serde(rename = "PlaybackStartTimeTicks", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub playback_start_time_ticks: Option<Option<i64>>,
    /// Gets or sets the volume level.
    #[serde(rename = "VolumeLevel", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub volume_level: Option<Option<i32>>,
    #[serde(rename = "Brightness", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub brightness: Option<Option<i32>>,
    #[serde(rename = "AspectRatio", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub aspect_ratio: Option<Option<String>>,
    /// Gets or sets the play method.
    #[serde(rename = "PlayMethod", skip_serializing_if = "Option::is_none")]
    pub play_method: Option<models::PlayMethod>,
    /// Gets or sets the live stream identifier.
    #[serde(rename = "LiveStreamId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub live_stream_id: Option<Option<String>>,
    /// Gets or sets the play session identifier.
    #[serde(rename = "PlaySessionId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub play_session_id: Option<Option<String>>,
    /// Gets or sets the repeat mode.
    #[serde(rename = "RepeatMode", skip_serializing_if = "Option::is_none")]
    pub repeat_mode: Option<models::RepeatMode>,
    /// Gets or sets the playback order.
    #[serde(rename = "PlaybackOrder", skip_serializing_if = "Option::is_none")]
    pub playback_order: Option<models::PlaybackOrder>,
    #[serde(rename = "NowPlayingQueue", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub now_playing_queue: Option<Option<Vec<models::QueueItem>>>,
    #[serde(rename = "PlaylistItemId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub playlist_item_id: Option<Option<String>>,
}

impl PlaybackProgressInfo {
    /// Class PlaybackProgressInfo.
    pub fn new() -> PlaybackProgressInfo {
        PlaybackProgressInfo {
            can_seek: None,
            item: None,
            item_id: None,
            session_id: None,
            media_source_id: None,
            audio_stream_index: None,
            subtitle_stream_index: None,
            is_paused: None,
            is_muted: None,
            position_ticks: None,
            playback_start_time_ticks: None,
            volume_level: None,
            brightness: None,
            aspect_ratio: None,
            play_method: None,
            live_stream_id: None,
            play_session_id: None,
            repeat_mode: None,
            playback_order: None,
            now_playing_queue: None,
            playlist_item_id: None,
        }
    }
}

