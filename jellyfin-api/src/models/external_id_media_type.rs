/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ExternalIdMediaType : The specific media type of an MediaBrowser.Model.Providers.ExternalIdInfo.
/// The specific media type of an MediaBrowser.Model.Providers.ExternalIdInfo.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ExternalIdMediaType {
    #[serde(rename = "Album")]
    Album,
    #[serde(rename = "AlbumArtist")]
    AlbumArtist,
    #[serde(rename = "Artist")]
    Artist,
    #[serde(rename = "BoxSet")]
    BoxSet,
    #[serde(rename = "Episode")]
    Episode,
    #[serde(rename = "Movie")]
    Movie,
    #[serde(rename = "OtherArtist")]
    OtherArtist,
    #[serde(rename = "Person")]
    Person,
    #[serde(rename = "ReleaseGroup")]
    ReleaseGroup,
    #[serde(rename = "Season")]
    Season,
    #[serde(rename = "Series")]
    Series,
    #[serde(rename = "Track")]
    Track,
    #[serde(rename = "Book")]
    Book,

}

impl std::fmt::Display for ExternalIdMediaType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Album => write!(f, "Album"),
            Self::AlbumArtist => write!(f, "AlbumArtist"),
            Self::Artist => write!(f, "Artist"),
            Self::BoxSet => write!(f, "BoxSet"),
            Self::Episode => write!(f, "Episode"),
            Self::Movie => write!(f, "Movie"),
            Self::OtherArtist => write!(f, "OtherArtist"),
            Self::Person => write!(f, "Person"),
            Self::ReleaseGroup => write!(f, "ReleaseGroup"),
            Self::Season => write!(f, "Season"),
            Self::Series => write!(f, "Series"),
            Self::Track => write!(f, "Track"),
            Self::Book => write!(f, "Book"),
        }
    }
}

impl Default for ExternalIdMediaType {
    fn default() -> ExternalIdMediaType {
        Self::Album
    }
}

