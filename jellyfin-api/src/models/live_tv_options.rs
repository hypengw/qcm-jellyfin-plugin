/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LiveTvOptions {
    #[serde(rename = "GuideDays", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub guide_days: Option<Option<i32>>,
    #[serde(rename = "RecordingPath", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub recording_path: Option<Option<String>>,
    #[serde(rename = "MovieRecordingPath", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub movie_recording_path: Option<Option<String>>,
    #[serde(rename = "SeriesRecordingPath", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub series_recording_path: Option<Option<String>>,
    #[serde(rename = "EnableRecordingSubfolders", skip_serializing_if = "Option::is_none")]
    pub enable_recording_subfolders: Option<bool>,
    #[serde(rename = "EnableOriginalAudioWithEncodedRecordings", skip_serializing_if = "Option::is_none")]
    pub enable_original_audio_with_encoded_recordings: Option<bool>,
    #[serde(rename = "TunerHosts", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tuner_hosts: Option<Option<Vec<models::TunerHostInfo>>>,
    #[serde(rename = "ListingProviders", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub listing_providers: Option<Option<Vec<models::ListingsProviderInfo>>>,
    #[serde(rename = "PrePaddingSeconds", skip_serializing_if = "Option::is_none")]
    pub pre_padding_seconds: Option<i32>,
    #[serde(rename = "PostPaddingSeconds", skip_serializing_if = "Option::is_none")]
    pub post_padding_seconds: Option<i32>,
    #[serde(rename = "MediaLocationsCreated", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub media_locations_created: Option<Option<Vec<String>>>,
    #[serde(rename = "RecordingPostProcessor", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub recording_post_processor: Option<Option<String>>,
    #[serde(rename = "RecordingPostProcessorArguments", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub recording_post_processor_arguments: Option<Option<String>>,
    #[serde(rename = "SaveRecordingNFO", skip_serializing_if = "Option::is_none")]
    pub save_recording_nfo: Option<bool>,
    #[serde(rename = "SaveRecordingImages", skip_serializing_if = "Option::is_none")]
    pub save_recording_images: Option<bool>,
}

impl LiveTvOptions {
    pub fn new() -> LiveTvOptions {
        LiveTvOptions {
            guide_days: None,
            recording_path: None,
            movie_recording_path: None,
            series_recording_path: None,
            enable_recording_subfolders: None,
            enable_original_audio_with_encoded_recordings: None,
            tuner_hosts: None,
            listing_providers: None,
            pre_padding_seconds: None,
            post_padding_seconds: None,
            media_locations_created: None,
            recording_post_processor: None,
            recording_post_processor_arguments: None,
            save_recording_nfo: None,
            save_recording_images: None,
        }
    }
}

