/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ExtraType {
    #[serde(rename = "Unknown")]
    Unknown,
    #[serde(rename = "Clip")]
    Clip,
    #[serde(rename = "Trailer")]
    Trailer,
    #[serde(rename = "BehindTheScenes")]
    BehindTheScenes,
    #[serde(rename = "DeletedScene")]
    DeletedScene,
    #[serde(rename = "Interview")]
    Interview,
    #[serde(rename = "Scene")]
    Scene,
    #[serde(rename = "Sample")]
    Sample,
    #[serde(rename = "ThemeSong")]
    ThemeSong,
    #[serde(rename = "ThemeVideo")]
    ThemeVideo,
    #[serde(rename = "Featurette")]
    Featurette,
    #[serde(rename = "Short")]
    Short,

}

impl std::fmt::Display for ExtraType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Unknown => write!(f, "Unknown"),
            Self::Clip => write!(f, "Clip"),
            Self::Trailer => write!(f, "Trailer"),
            Self::BehindTheScenes => write!(f, "BehindTheScenes"),
            Self::DeletedScene => write!(f, "DeletedScene"),
            Self::Interview => write!(f, "Interview"),
            Self::Scene => write!(f, "Scene"),
            Self::Sample => write!(f, "Sample"),
            Self::ThemeSong => write!(f, "ThemeSong"),
            Self::ThemeVideo => write!(f, "ThemeVideo"),
            Self::Featurette => write!(f, "Featurette"),
            Self::Short => write!(f, "Short"),
        }
    }
}

impl Default for ExtraType {
    fn default() -> ExtraType {
        Self::Unknown
    }
}

