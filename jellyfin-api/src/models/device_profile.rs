/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// DeviceProfile : A MediaBrowser.Model.Dlna.DeviceProfile represents a set of metadata which determines which content a certain device is able to play.  <br />  Specifically, it defines the supported <see cref=\"P:MediaBrowser.Model.Dlna.DeviceProfile.ContainerProfiles\">containers</see> and  <see cref=\"P:MediaBrowser.Model.Dlna.DeviceProfile.CodecProfiles\">codecs</see> (video and/or audio, including codec profiles and levels)  the device is able to direct play (without transcoding or remuxing),  as well as which <see cref=\"P:MediaBrowser.Model.Dlna.DeviceProfile.TranscodingProfiles\">containers/codecs to transcode to</see> in case it isn't.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeviceProfile {
    /// Gets or sets the name of this device profile. User profiles must have a unique name.
    #[serde(rename = "Name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    /// Gets or sets the unique internal identifier.
    #[serde(rename = "Id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<uuid::Uuid>>,
    /// Gets or sets the maximum allowed bitrate for all streamed content.
    #[serde(rename = "MaxStreamingBitrate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_streaming_bitrate: Option<Option<i32>>,
    /// Gets or sets the maximum allowed bitrate for statically streamed content (= direct played files).
    #[serde(rename = "MaxStaticBitrate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_static_bitrate: Option<Option<i32>>,
    /// Gets or sets the maximum allowed bitrate for transcoded music streams.
    #[serde(rename = "MusicStreamingTranscodingBitrate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub music_streaming_transcoding_bitrate: Option<Option<i32>>,
    /// Gets or sets the maximum allowed bitrate for statically streamed (= direct played) music files.
    #[serde(rename = "MaxStaticMusicBitrate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_static_music_bitrate: Option<Option<i32>>,
    /// Gets or sets the direct play profiles.
    #[serde(rename = "DirectPlayProfiles", skip_serializing_if = "Option::is_none")]
    pub direct_play_profiles: Option<Vec<models::DirectPlayProfile>>,
    /// Gets or sets the transcoding profiles.
    #[serde(rename = "TranscodingProfiles", skip_serializing_if = "Option::is_none")]
    pub transcoding_profiles: Option<Vec<models::TranscodingProfile>>,
    /// Gets or sets the container profiles. Failing to meet these optional conditions causes transcoding to occur.
    #[serde(rename = "ContainerProfiles", skip_serializing_if = "Option::is_none")]
    pub container_profiles: Option<Vec<models::ContainerProfile>>,
    /// Gets or sets the codec profiles.
    #[serde(rename = "CodecProfiles", skip_serializing_if = "Option::is_none")]
    pub codec_profiles: Option<Vec<models::CodecProfile>>,
    /// Gets or sets the subtitle profiles.
    #[serde(rename = "SubtitleProfiles", skip_serializing_if = "Option::is_none")]
    pub subtitle_profiles: Option<Vec<models::SubtitleProfile>>,
}

impl DeviceProfile {
    /// A MediaBrowser.Model.Dlna.DeviceProfile represents a set of metadata which determines which content a certain device is able to play.  <br />  Specifically, it defines the supported <see cref=\"P:MediaBrowser.Model.Dlna.DeviceProfile.ContainerProfiles\">containers</see> and  <see cref=\"P:MediaBrowser.Model.Dlna.DeviceProfile.CodecProfiles\">codecs</see> (video and/or audio, including codec profiles and levels)  the device is able to direct play (without transcoding or remuxing),  as well as which <see cref=\"P:MediaBrowser.Model.Dlna.DeviceProfile.TranscodingProfiles\">containers/codecs to transcode to</see> in case it isn't.
    pub fn new() -> DeviceProfile {
        DeviceProfile {
            name: None,
            id: None,
            max_streaming_bitrate: None,
            max_static_bitrate: None,
            music_streaming_transcoding_bitrate: None,
            max_static_music_bitrate: None,
            direct_play_profiles: None,
            transcoding_profiles: None,
            container_profiles: None,
            codec_profiles: None,
            subtitle_profiles: None,
        }
    }
}

