/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MediaSegmentType : Defines the types of content an individual Jellyfin.Data.Entities.MediaSegment represents.
/// Defines the types of content an individual Jellyfin.Data.Entities.MediaSegment represents.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MediaSegmentType {
    #[serde(rename = "Unknown")]
    Unknown,
    #[serde(rename = "Commercial")]
    Commercial,
    #[serde(rename = "Preview")]
    Preview,
    #[serde(rename = "Recap")]
    Recap,
    #[serde(rename = "Outro")]
    Outro,
    #[serde(rename = "Intro")]
    Intro,

}

impl std::fmt::Display for MediaSegmentType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Unknown => write!(f, "Unknown"),
            Self::Commercial => write!(f, "Commercial"),
            Self::Preview => write!(f, "Preview"),
            Self::Recap => write!(f, "Recap"),
            Self::Outro => write!(f, "Outro"),
            Self::Intro => write!(f, "Intro"),
        }
    }
}

impl Default for MediaSegmentType {
    fn default() -> MediaSegmentType {
        Self::Unknown
    }
}

