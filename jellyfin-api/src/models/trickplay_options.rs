/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TrickplayOptions : Class TrickplayOptions.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TrickplayOptions {
    /// Gets or sets a value indicating whether or not to use HW acceleration.
    #[serde(rename = "EnableHwAcceleration", skip_serializing_if = "Option::is_none")]
    pub enable_hw_acceleration: Option<bool>,
    /// Gets or sets a value indicating whether or not to use HW accelerated MJPEG encoding.
    #[serde(rename = "EnableHwEncoding", skip_serializing_if = "Option::is_none")]
    pub enable_hw_encoding: Option<bool>,
    /// Gets or sets a value indicating whether to only extract key frames.  Significantly faster, but is not compatible with all decoders and/or video files.
    #[serde(rename = "EnableKeyFrameOnlyExtraction", skip_serializing_if = "Option::is_none")]
    pub enable_key_frame_only_extraction: Option<bool>,
    /// Gets or sets the behavior used by trickplay provider on library scan/update.
    #[serde(rename = "ScanBehavior", skip_serializing_if = "Option::is_none")]
    pub scan_behavior: Option<models::TrickplayScanBehavior>,
    /// Gets or sets the process priority for the ffmpeg process.
    #[serde(rename = "ProcessPriority", skip_serializing_if = "Option::is_none")]
    pub process_priority: Option<models::ProcessPriorityClass>,
    /// Gets or sets the interval, in ms, between each new trickplay image.
    #[serde(rename = "Interval", skip_serializing_if = "Option::is_none")]
    pub interval: Option<i32>,
    /// Gets or sets the target width resolutions, in px, to generates preview images for.
    #[serde(rename = "WidthResolutions", skip_serializing_if = "Option::is_none")]
    pub width_resolutions: Option<Vec<i32>>,
    /// Gets or sets number of tile images to allow in X dimension.
    #[serde(rename = "TileWidth", skip_serializing_if = "Option::is_none")]
    pub tile_width: Option<i32>,
    /// Gets or sets number of tile images to allow in Y dimension.
    #[serde(rename = "TileHeight", skip_serializing_if = "Option::is_none")]
    pub tile_height: Option<i32>,
    /// Gets or sets the ffmpeg output quality level.
    #[serde(rename = "Qscale", skip_serializing_if = "Option::is_none")]
    pub qscale: Option<i32>,
    /// Gets or sets the jpeg quality to use for image tiles.
    #[serde(rename = "JpegQuality", skip_serializing_if = "Option::is_none")]
    pub jpeg_quality: Option<i32>,
    /// Gets or sets the number of threads to be used by ffmpeg.
    #[serde(rename = "ProcessThreads", skip_serializing_if = "Option::is_none")]
    pub process_threads: Option<i32>,
}

impl TrickplayOptions {
    /// Class TrickplayOptions.
    pub fn new() -> TrickplayOptions {
        TrickplayOptions {
            enable_hw_acceleration: None,
            enable_hw_encoding: None,
            enable_key_frame_only_extraction: None,
            scan_behavior: None,
            process_priority: None,
            interval: None,
            width_resolutions: None,
            tile_width: None,
            tile_height: None,
            qscale: None,
            jpeg_quality: None,
            process_threads: None,
        }
    }
}

