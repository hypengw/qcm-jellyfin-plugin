/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PlaybackRequestType : Enum PlaybackRequestType.
/// Enum PlaybackRequestType.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PlaybackRequestType {
    #[serde(rename = "Play")]
    Play,
    #[serde(rename = "SetPlaylistItem")]
    SetPlaylistItem,
    #[serde(rename = "RemoveFromPlaylist")]
    RemoveFromPlaylist,
    #[serde(rename = "MovePlaylistItem")]
    MovePlaylistItem,
    #[serde(rename = "Queue")]
    Queue,
    #[serde(rename = "Unpause")]
    Unpause,
    #[serde(rename = "Pause")]
    Pause,
    #[serde(rename = "Stop")]
    Stop,
    #[serde(rename = "Seek")]
    Seek,
    #[serde(rename = "Buffer")]
    Buffer,
    #[serde(rename = "Ready")]
    Ready,
    #[serde(rename = "NextItem")]
    NextItem,
    #[serde(rename = "PreviousItem")]
    PreviousItem,
    #[serde(rename = "SetRepeatMode")]
    SetRepeatMode,
    #[serde(rename = "SetShuffleMode")]
    SetShuffleMode,
    #[serde(rename = "Ping")]
    Ping,
    #[serde(rename = "IgnoreWait")]
    IgnoreWait,

}

impl std::fmt::Display for PlaybackRequestType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Play => write!(f, "Play"),
            Self::SetPlaylistItem => write!(f, "SetPlaylistItem"),
            Self::RemoveFromPlaylist => write!(f, "RemoveFromPlaylist"),
            Self::MovePlaylistItem => write!(f, "MovePlaylistItem"),
            Self::Queue => write!(f, "Queue"),
            Self::Unpause => write!(f, "Unpause"),
            Self::Pause => write!(f, "Pause"),
            Self::Stop => write!(f, "Stop"),
            Self::Seek => write!(f, "Seek"),
            Self::Buffer => write!(f, "Buffer"),
            Self::Ready => write!(f, "Ready"),
            Self::NextItem => write!(f, "NextItem"),
            Self::PreviousItem => write!(f, "PreviousItem"),
            Self::SetRepeatMode => write!(f, "SetRepeatMode"),
            Self::SetShuffleMode => write!(f, "SetShuffleMode"),
            Self::Ping => write!(f, "Ping"),
            Self::IgnoreWait => write!(f, "IgnoreWait"),
        }
    }
}

impl Default for PlaybackRequestType {
    fn default() -> PlaybackRequestType {
        Self::Play
    }
}

