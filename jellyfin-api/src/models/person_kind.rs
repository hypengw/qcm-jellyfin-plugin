/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PersonKind : The person kind.
/// The person kind.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PersonKind {
    #[serde(rename = "Unknown")]
    Unknown,
    #[serde(rename = "Actor")]
    Actor,
    #[serde(rename = "Director")]
    Director,
    #[serde(rename = "Composer")]
    Composer,
    #[serde(rename = "Writer")]
    Writer,
    #[serde(rename = "GuestStar")]
    GuestStar,
    #[serde(rename = "Producer")]
    Producer,
    #[serde(rename = "Conductor")]
    Conductor,
    #[serde(rename = "Lyricist")]
    Lyricist,
    #[serde(rename = "Arranger")]
    Arranger,
    #[serde(rename = "Engineer")]
    Engineer,
    #[serde(rename = "Mixer")]
    Mixer,
    #[serde(rename = "Remixer")]
    Remixer,
    #[serde(rename = "Creator")]
    Creator,
    #[serde(rename = "Artist")]
    Artist,
    #[serde(rename = "AlbumArtist")]
    AlbumArtist,
    #[serde(rename = "Author")]
    Author,
    #[serde(rename = "Illustrator")]
    Illustrator,
    #[serde(rename = "Penciller")]
    Penciller,
    #[serde(rename = "Inker")]
    Inker,
    #[serde(rename = "Colorist")]
    Colorist,
    #[serde(rename = "Letterer")]
    Letterer,
    #[serde(rename = "CoverArtist")]
    CoverArtist,
    #[serde(rename = "Editor")]
    Editor,
    #[serde(rename = "Translator")]
    Translator,

}

impl std::fmt::Display for PersonKind {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Unknown => write!(f, "Unknown"),
            Self::Actor => write!(f, "Actor"),
            Self::Director => write!(f, "Director"),
            Self::Composer => write!(f, "Composer"),
            Self::Writer => write!(f, "Writer"),
            Self::GuestStar => write!(f, "GuestStar"),
            Self::Producer => write!(f, "Producer"),
            Self::Conductor => write!(f, "Conductor"),
            Self::Lyricist => write!(f, "Lyricist"),
            Self::Arranger => write!(f, "Arranger"),
            Self::Engineer => write!(f, "Engineer"),
            Self::Mixer => write!(f, "Mixer"),
            Self::Remixer => write!(f, "Remixer"),
            Self::Creator => write!(f, "Creator"),
            Self::Artist => write!(f, "Artist"),
            Self::AlbumArtist => write!(f, "AlbumArtist"),
            Self::Author => write!(f, "Author"),
            Self::Illustrator => write!(f, "Illustrator"),
            Self::Penciller => write!(f, "Penciller"),
            Self::Inker => write!(f, "Inker"),
            Self::Colorist => write!(f, "Colorist"),
            Self::Letterer => write!(f, "Letterer"),
            Self::CoverArtist => write!(f, "CoverArtist"),
            Self::Editor => write!(f, "Editor"),
            Self::Translator => write!(f, "Translator"),
        }
    }
}

impl Default for PersonKind {
    fn default() -> PersonKind {
        Self::Unknown
    }
}

