/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`delete_subtitle`]
#[derive(Clone, Debug)]
pub struct DeleteSubtitleParams {
    /// The item id.
    pub item_id: String,
    /// The index of the subtitle file.
    pub index: i32
}

/// struct for passing parameters to the method [`download_remote_subtitles`]
#[derive(Clone, Debug)]
pub struct DownloadRemoteSubtitlesParams {
    /// The item id.
    pub item_id: String,
    /// The subtitle id.
    pub subtitle_id: String
}

/// struct for passing parameters to the method [`get_fallback_font`]
#[derive(Clone, Debug)]
pub struct GetFallbackFontParams {
    /// The name of the fallback font file to get.
    pub name: String
}

/// struct for passing parameters to the method [`get_remote_subtitles`]
#[derive(Clone, Debug)]
pub struct GetRemoteSubtitlesParams {
    /// The item id.
    pub subtitle_id: String
}

/// struct for passing parameters to the method [`get_subtitle`]
#[derive(Clone, Debug)]
pub struct GetSubtitleParams {
    /// The (route) item id.
    pub route_item_id: String,
    /// The (route) media source id.
    pub route_media_source_id: String,
    /// The (route) subtitle stream index.
    pub route_index: i32,
    /// The (route) format of the returned subtitle.
    pub route_format: String,
    /// The item id.
    pub item_id: Option<String>,
    /// The media source id.
    pub media_source_id: Option<String>,
    /// The subtitle stream index.
    pub index: Option<i32>,
    /// The format of the returned subtitle.
    pub format: Option<String>,
    /// Optional. The end position of the subtitle in ticks.
    pub end_position_ticks: Option<i64>,
    /// Optional. Whether to copy the timestamps.
    pub copy_timestamps: Option<bool>,
    /// Optional. Whether to add a VTT time map.
    pub add_vtt_time_map: Option<bool>,
    /// The start position of the subtitle in ticks.
    pub start_position_ticks: Option<i64>
}

/// struct for passing parameters to the method [`get_subtitle_playlist`]
#[derive(Clone, Debug)]
pub struct GetSubtitlePlaylistParams {
    /// The item id.
    pub item_id: String,
    /// The subtitle stream index.
    pub index: i32,
    /// The media source id.
    pub media_source_id: String,
    /// The subtitle segment length.
    pub segment_length: i32
}

/// struct for passing parameters to the method [`get_subtitle_with_ticks`]
#[derive(Clone, Debug)]
pub struct GetSubtitleWithTicksParams {
    /// The (route) item id.
    pub route_item_id: String,
    /// The (route) media source id.
    pub route_media_source_id: String,
    /// The (route) subtitle stream index.
    pub route_index: i32,
    /// The (route) start position of the subtitle in ticks.
    pub route_start_position_ticks: i64,
    /// The (route) format of the returned subtitle.
    pub route_format: String,
    /// The item id.
    pub item_id: Option<String>,
    /// The media source id.
    pub media_source_id: Option<String>,
    /// The subtitle stream index.
    pub index: Option<i32>,
    /// The start position of the subtitle in ticks.
    pub start_position_ticks: Option<i64>,
    /// The format of the returned subtitle.
    pub format: Option<String>,
    /// Optional. The end position of the subtitle in ticks.
    pub end_position_ticks: Option<i64>,
    /// Optional. Whether to copy the timestamps.
    pub copy_timestamps: Option<bool>,
    /// Optional. Whether to add a VTT time map.
    pub add_vtt_time_map: Option<bool>
}

/// struct for passing parameters to the method [`search_remote_subtitles`]
#[derive(Clone, Debug)]
pub struct SearchRemoteSubtitlesParams {
    /// The item id.
    pub item_id: String,
    /// The language of the subtitles.
    pub language: String,
    /// Optional. Only show subtitles which are a perfect match.
    pub is_perfect_match: Option<bool>
}

/// struct for passing parameters to the method [`upload_subtitle`]
#[derive(Clone, Debug)]
pub struct UploadSubtitleParams {
    /// The item the subtitle belongs to.
    pub item_id: String,
    /// The request body.
    pub upload_subtitle_dto: models::UploadSubtitleDto
}


/// struct for typed successes of method [`delete_subtitle`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSubtitleSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`download_remote_subtitles`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DownloadRemoteSubtitlesSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_fallback_font`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFallbackFontSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_fallback_font_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFallbackFontListSuccess {
    Status200(Vec<models::FontFile>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_remote_subtitles`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRemoteSubtitlesSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_subtitle`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSubtitleSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_subtitle_playlist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSubtitlePlaylistSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_subtitle_with_ticks`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSubtitleWithTicksSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`search_remote_subtitles`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchRemoteSubtitlesSuccess {
    Status200(Vec<models::RemoteSubtitleInfo>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`upload_subtitle`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UploadSubtitleSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_subtitle`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSubtitleError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`download_remote_subtitles`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DownloadRemoteSubtitlesError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_fallback_font`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFallbackFontError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_fallback_font_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFallbackFontListError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_remote_subtitles`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRemoteSubtitlesError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_subtitle`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSubtitleError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_subtitle_playlist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSubtitlePlaylistError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_subtitle_with_ticks`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSubtitleWithTicksError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_remote_subtitles`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchRemoteSubtitlesError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`upload_subtitle`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UploadSubtitleError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}


pub async fn delete_subtitle(configuration: &configuration::Configuration, params: DeleteSubtitleParams) -> Result<ResponseContent<DeleteSubtitleSuccess>, Error<DeleteSubtitleError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let index = params.index;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Videos/{itemId}/Subtitles/{index}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), index=index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<DeleteSubtitleSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<DeleteSubtitleError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn download_remote_subtitles(configuration: &configuration::Configuration, params: DownloadRemoteSubtitlesParams) -> Result<ResponseContent<DownloadRemoteSubtitlesSuccess>, Error<DownloadRemoteSubtitlesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let subtitle_id = params.subtitle_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/RemoteSearch/Subtitles/{subtitleId}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), subtitleId=crate::apis::urlencode(subtitle_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<DownloadRemoteSubtitlesSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<DownloadRemoteSubtitlesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_fallback_font(configuration: &configuration::Configuration, params: GetFallbackFontParams) -> Result<ResponseContent<GetFallbackFontSuccess>, Error<GetFallbackFontError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/FallbackFont/Fonts/{name}", local_var_configuration.base_path, name=crate::apis::urlencode(name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetFallbackFontSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetFallbackFontError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_fallback_font_list(configuration: &configuration::Configuration) -> Result<ResponseContent<GetFallbackFontListSuccess>, Error<GetFallbackFontListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/FallbackFont/Fonts", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetFallbackFontListSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetFallbackFontListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_remote_subtitles(configuration: &configuration::Configuration, params: GetRemoteSubtitlesParams) -> Result<ResponseContent<GetRemoteSubtitlesSuccess>, Error<GetRemoteSubtitlesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let subtitle_id = params.subtitle_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Providers/Subtitles/Subtitles/{subtitleId}", local_var_configuration.base_path, subtitleId=crate::apis::urlencode(subtitle_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetRemoteSubtitlesSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetRemoteSubtitlesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_subtitle(configuration: &configuration::Configuration, params: GetSubtitleParams) -> Result<ResponseContent<GetSubtitleSuccess>, Error<GetSubtitleError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let route_item_id = params.route_item_id;
    let route_media_source_id = params.route_media_source_id;
    let route_index = params.route_index;
    let route_format = params.route_format;
    let item_id = params.item_id;
    let media_source_id = params.media_source_id;
    let index = params.index;
    let format = params.format;
    let end_position_ticks = params.end_position_ticks;
    let copy_timestamps = params.copy_timestamps;
    let add_vtt_time_map = params.add_vtt_time_map;
    let start_position_ticks = params.start_position_ticks;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Videos/{routeItemId}/{routeMediaSourceId}/Subtitles/{routeIndex}/Stream.{routeFormat}", local_var_configuration.base_path, routeItemId=crate::apis::urlencode(route_item_id), routeMediaSourceId=crate::apis::urlencode(route_media_source_id), routeIndex=route_index, routeFormat=crate::apis::urlencode(route_format));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = item_id {
        local_var_req_builder = local_var_req_builder.query(&[("itemId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = media_source_id {
        local_var_req_builder = local_var_req_builder.query(&[("mediaSourceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = index {
        local_var_req_builder = local_var_req_builder.query(&[("index", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = end_position_ticks {
        local_var_req_builder = local_var_req_builder.query(&[("endPositionTicks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = copy_timestamps {
        local_var_req_builder = local_var_req_builder.query(&[("copyTimestamps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_vtt_time_map {
        local_var_req_builder = local_var_req_builder.query(&[("addVttTimeMap", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_position_ticks {
        local_var_req_builder = local_var_req_builder.query(&[("startPositionTicks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetSubtitleSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetSubtitleError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_subtitle_playlist(configuration: &configuration::Configuration, params: GetSubtitlePlaylistParams) -> Result<ResponseContent<GetSubtitlePlaylistSuccess>, Error<GetSubtitlePlaylistError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let index = params.index;
    let media_source_id = params.media_source_id;
    let segment_length = params.segment_length;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/subtitles.m3u8", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), index=index, mediaSourceId=crate::apis::urlencode(media_source_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("segmentLength", &segment_length.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetSubtitlePlaylistSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetSubtitlePlaylistError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_subtitle_with_ticks(configuration: &configuration::Configuration, params: GetSubtitleWithTicksParams) -> Result<ResponseContent<GetSubtitleWithTicksSuccess>, Error<GetSubtitleWithTicksError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let route_item_id = params.route_item_id;
    let route_media_source_id = params.route_media_source_id;
    let route_index = params.route_index;
    let route_start_position_ticks = params.route_start_position_ticks;
    let route_format = params.route_format;
    let item_id = params.item_id;
    let media_source_id = params.media_source_id;
    let index = params.index;
    let start_position_ticks = params.start_position_ticks;
    let format = params.format;
    let end_position_ticks = params.end_position_ticks;
    let copy_timestamps = params.copy_timestamps;
    let add_vtt_time_map = params.add_vtt_time_map;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Videos/{routeItemId}/{routeMediaSourceId}/Subtitles/{routeIndex}/{routeStartPositionTicks}/Stream.{routeFormat}", local_var_configuration.base_path, routeItemId=crate::apis::urlencode(route_item_id), routeMediaSourceId=crate::apis::urlencode(route_media_source_id), routeIndex=route_index, routeStartPositionTicks=route_start_position_ticks, routeFormat=crate::apis::urlencode(route_format));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = item_id {
        local_var_req_builder = local_var_req_builder.query(&[("itemId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = media_source_id {
        local_var_req_builder = local_var_req_builder.query(&[("mediaSourceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = index {
        local_var_req_builder = local_var_req_builder.query(&[("index", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_position_ticks {
        local_var_req_builder = local_var_req_builder.query(&[("startPositionTicks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = end_position_ticks {
        local_var_req_builder = local_var_req_builder.query(&[("endPositionTicks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = copy_timestamps {
        local_var_req_builder = local_var_req_builder.query(&[("copyTimestamps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_vtt_time_map {
        local_var_req_builder = local_var_req_builder.query(&[("addVttTimeMap", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetSubtitleWithTicksSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetSubtitleWithTicksError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn search_remote_subtitles(configuration: &configuration::Configuration, params: SearchRemoteSubtitlesParams) -> Result<ResponseContent<SearchRemoteSubtitlesSuccess>, Error<SearchRemoteSubtitlesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let language = params.language;
    let is_perfect_match = params.is_perfect_match;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/RemoteSearch/Subtitles/{language}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), language=crate::apis::urlencode(language));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = is_perfect_match {
        local_var_req_builder = local_var_req_builder.query(&[("isPerfectMatch", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<SearchRemoteSubtitlesSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<SearchRemoteSubtitlesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn upload_subtitle(configuration: &configuration::Configuration, params: UploadSubtitleParams) -> Result<ResponseContent<UploadSubtitleSuccess>, Error<UploadSubtitleError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let upload_subtitle_dto = params.upload_subtitle_dto;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Videos/{itemId}/Subtitles", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&upload_subtitle_dto);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<UploadSubtitleSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<UploadSubtitleError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

