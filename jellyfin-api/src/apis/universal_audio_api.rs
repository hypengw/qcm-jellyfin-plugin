/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`get_universal_audio_stream`]
#[derive(Clone, Debug)]
pub struct GetUniversalAudioStreamParams {
    /// The item id.
    pub item_id: String,
    /// Optional. The audio container.
    pub container: Option<Vec<String>>,
    /// The media version id, if playing an alternate version.
    pub media_source_id: Option<String>,
    /// The device id of the client requesting. Used to stop encoding processes when needed.
    pub device_id: Option<String>,
    /// Optional. The user id.
    pub user_id: Option<String>,
    /// Optional. The audio codec to transcode to.
    pub audio_codec: Option<String>,
    /// Optional. The maximum number of audio channels.
    pub max_audio_channels: Option<i32>,
    /// Optional. The number of how many audio channels to transcode to.
    pub transcoding_audio_channels: Option<i32>,
    /// Optional. The maximum streaming bitrate.
    pub max_streaming_bitrate: Option<i32>,
    /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
    pub audio_bit_rate: Option<i32>,
    /// Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.
    pub start_time_ticks: Option<i64>,
    /// Optional. The container to transcode to.
    pub transcoding_container: Option<String>,
    /// Optional. The transcoding protocol.
    pub transcoding_protocol: Option<String>,
    /// Optional. The maximum audio sample rate.
    pub max_audio_sample_rate: Option<i32>,
    /// Optional. The maximum audio bit depth.
    pub max_audio_bit_depth: Option<i32>,
    /// Optional. Whether to enable remote media.
    pub enable_remote_media: Option<bool>,
    /// Optional. Whether to enable Audio Encoding.
    pub enable_audio_vbr_encoding: Option<bool>,
    /// Optional. Whether to break on non key frames.
    pub break_on_non_key_frames: Option<bool>,
    /// Whether to enable redirection. Defaults to true.
    pub enable_redirection: Option<bool>
}

/// struct for passing parameters to the method [`head_universal_audio_stream`]
#[derive(Clone, Debug)]
pub struct HeadUniversalAudioStreamParams {
    /// The item id.
    pub item_id: String,
    /// Optional. The audio container.
    pub container: Option<Vec<String>>,
    /// The media version id, if playing an alternate version.
    pub media_source_id: Option<String>,
    /// The device id of the client requesting. Used to stop encoding processes when needed.
    pub device_id: Option<String>,
    /// Optional. The user id.
    pub user_id: Option<String>,
    /// Optional. The audio codec to transcode to.
    pub audio_codec: Option<String>,
    /// Optional. The maximum number of audio channels.
    pub max_audio_channels: Option<i32>,
    /// Optional. The number of how many audio channels to transcode to.
    pub transcoding_audio_channels: Option<i32>,
    /// Optional. The maximum streaming bitrate.
    pub max_streaming_bitrate: Option<i32>,
    /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
    pub audio_bit_rate: Option<i32>,
    /// Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.
    pub start_time_ticks: Option<i64>,
    /// Optional. The container to transcode to.
    pub transcoding_container: Option<String>,
    /// Optional. The transcoding protocol.
    pub transcoding_protocol: Option<String>,
    /// Optional. The maximum audio sample rate.
    pub max_audio_sample_rate: Option<i32>,
    /// Optional. The maximum audio bit depth.
    pub max_audio_bit_depth: Option<i32>,
    /// Optional. Whether to enable remote media.
    pub enable_remote_media: Option<bool>,
    /// Optional. Whether to enable Audio Encoding.
    pub enable_audio_vbr_encoding: Option<bool>,
    /// Optional. Whether to break on non key frames.
    pub break_on_non_key_frames: Option<bool>,
    /// Whether to enable redirection. Defaults to true.
    pub enable_redirection: Option<bool>
}


/// struct for typed successes of method [`get_universal_audio_stream`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetUniversalAudioStreamSuccess {
    Status200(std::path::PathBuf),
    Status302(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`head_universal_audio_stream`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadUniversalAudioStreamSuccess {
    Status200(std::path::PathBuf),
    Status302(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_universal_audio_stream`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetUniversalAudioStreamError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_universal_audio_stream`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadUniversalAudioStreamError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}


pub async fn get_universal_audio_stream(configuration: &configuration::Configuration, params: GetUniversalAudioStreamParams) -> Result<ResponseContent<GetUniversalAudioStreamSuccess>, Error<GetUniversalAudioStreamError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let container = params.container;
    let media_source_id = params.media_source_id;
    let device_id = params.device_id;
    let user_id = params.user_id;
    let audio_codec = params.audio_codec;
    let max_audio_channels = params.max_audio_channels;
    let transcoding_audio_channels = params.transcoding_audio_channels;
    let max_streaming_bitrate = params.max_streaming_bitrate;
    let audio_bit_rate = params.audio_bit_rate;
    let start_time_ticks = params.start_time_ticks;
    let transcoding_container = params.transcoding_container;
    let transcoding_protocol = params.transcoding_protocol;
    let max_audio_sample_rate = params.max_audio_sample_rate;
    let max_audio_bit_depth = params.max_audio_bit_depth;
    let enable_remote_media = params.enable_remote_media;
    let enable_audio_vbr_encoding = params.enable_audio_vbr_encoding;
    let break_on_non_key_frames = params.break_on_non_key_frames;
    let enable_redirection = params.enable_redirection;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Audio/{itemId}/universal", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = container {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("container".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("container", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = media_source_id {
        local_var_req_builder = local_var_req_builder.query(&[("mediaSourceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("deviceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("userId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_codec {
        local_var_req_builder = local_var_req_builder.query(&[("audioCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcoding_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("transcodingAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_streaming_bitrate {
        local_var_req_builder = local_var_req_builder.query(&[("maxStreamingBitrate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_bit_rate {
        local_var_req_builder = local_var_req_builder.query(&[("audioBitRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_time_ticks {
        local_var_req_builder = local_var_req_builder.query(&[("startTimeTicks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcoding_container {
        local_var_req_builder = local_var_req_builder.query(&[("transcodingContainer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcoding_protocol {
        local_var_req_builder = local_var_req_builder.query(&[("transcodingProtocol", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_sample_rate {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioSampleRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_bit_depth {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioBitDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_remote_media {
        local_var_req_builder = local_var_req_builder.query(&[("enableRemoteMedia", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_audio_vbr_encoding {
        local_var_req_builder = local_var_req_builder.query(&[("enableAudioVbrEncoding", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = break_on_non_key_frames {
        local_var_req_builder = local_var_req_builder.query(&[("breakOnNonKeyFrames", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_redirection {
        local_var_req_builder = local_var_req_builder.query(&[("enableRedirection", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetUniversalAudioStreamSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetUniversalAudioStreamError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_universal_audio_stream(configuration: &configuration::Configuration, params: HeadUniversalAudioStreamParams) -> Result<ResponseContent<HeadUniversalAudioStreamSuccess>, Error<HeadUniversalAudioStreamError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let container = params.container;
    let media_source_id = params.media_source_id;
    let device_id = params.device_id;
    let user_id = params.user_id;
    let audio_codec = params.audio_codec;
    let max_audio_channels = params.max_audio_channels;
    let transcoding_audio_channels = params.transcoding_audio_channels;
    let max_streaming_bitrate = params.max_streaming_bitrate;
    let audio_bit_rate = params.audio_bit_rate;
    let start_time_ticks = params.start_time_ticks;
    let transcoding_container = params.transcoding_container;
    let transcoding_protocol = params.transcoding_protocol;
    let max_audio_sample_rate = params.max_audio_sample_rate;
    let max_audio_bit_depth = params.max_audio_bit_depth;
    let enable_remote_media = params.enable_remote_media;
    let enable_audio_vbr_encoding = params.enable_audio_vbr_encoding;
    let break_on_non_key_frames = params.break_on_non_key_frames;
    let enable_redirection = params.enable_redirection;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Audio/{itemId}/universal", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = container {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("container".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("container", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = media_source_id {
        local_var_req_builder = local_var_req_builder.query(&[("mediaSourceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("deviceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("userId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_codec {
        local_var_req_builder = local_var_req_builder.query(&[("audioCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcoding_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("transcodingAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_streaming_bitrate {
        local_var_req_builder = local_var_req_builder.query(&[("maxStreamingBitrate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_bit_rate {
        local_var_req_builder = local_var_req_builder.query(&[("audioBitRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_time_ticks {
        local_var_req_builder = local_var_req_builder.query(&[("startTimeTicks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcoding_container {
        local_var_req_builder = local_var_req_builder.query(&[("transcodingContainer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcoding_protocol {
        local_var_req_builder = local_var_req_builder.query(&[("transcodingProtocol", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_sample_rate {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioSampleRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_bit_depth {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioBitDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_remote_media {
        local_var_req_builder = local_var_req_builder.query(&[("enableRemoteMedia", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_audio_vbr_encoding {
        local_var_req_builder = local_var_req_builder.query(&[("enableAudioVbrEncoding", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = break_on_non_key_frames {
        local_var_req_builder = local_var_req_builder.query(&[("breakOnNonKeyFrames", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_redirection {
        local_var_req_builder = local_var_req_builder.query(&[("enableRedirection", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<HeadUniversalAudioStreamSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<HeadUniversalAudioStreamError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

