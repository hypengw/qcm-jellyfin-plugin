/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`get_attachment`]
#[derive(Clone, Debug)]
pub struct GetAttachmentParams {
    /// Video ID.
    pub video_id: String,
    /// Media Source ID.
    pub media_source_id: String,
    /// Attachment Index.
    pub index: i32
}


/// struct for typed successes of method [`get_attachment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAttachmentSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_attachment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAttachmentError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}


pub async fn get_attachment(configuration: &configuration::Configuration, params: GetAttachmentParams) -> Result<ResponseContent<GetAttachmentSuccess>, Error<GetAttachmentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let video_id = params.video_id;
    let media_source_id = params.media_source_id;
    let index = params.index;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Videos/{videoId}/{mediaSourceId}/Attachments/{index}", local_var_configuration.base_path, videoId=crate::apis::urlencode(video_id), mediaSourceId=crate::apis::urlencode(media_source_id), index=index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetAttachmentSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetAttachmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

