/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`close_live_stream`]
#[derive(Clone, Debug)]
pub struct CloseLiveStreamParams {
    /// The livestream id.
    pub live_stream_id: String
}

/// struct for passing parameters to the method [`get_bitrate_test_bytes`]
#[derive(Clone, Debug)]
pub struct GetBitrateTestBytesParams {
    /// The bitrate. Defaults to 102400.
    pub size: Option<i32>
}

/// struct for passing parameters to the method [`get_playback_info`]
#[derive(Clone, Debug)]
pub struct GetPlaybackInfoParams {
    /// The item id.
    pub item_id: String,
    /// The user id.
    pub user_id: Option<String>
}

/// struct for passing parameters to the method [`get_posted_playback_info`]
#[derive(Clone, Debug)]
pub struct GetPostedPlaybackInfoParams {
    /// The item id.
    pub item_id: String,
    /// The user id.
    pub user_id: Option<String>,
    /// The maximum streaming bitrate.
    pub max_streaming_bitrate: Option<i32>,
    /// The start time in ticks.
    pub start_time_ticks: Option<i64>,
    /// The audio stream index.
    pub audio_stream_index: Option<i32>,
    /// The subtitle stream index.
    pub subtitle_stream_index: Option<i32>,
    /// The maximum number of audio channels.
    pub max_audio_channels: Option<i32>,
    /// The media source id.
    pub media_source_id: Option<String>,
    /// The livestream id.
    pub live_stream_id: Option<String>,
    /// Whether to auto open the livestream.
    pub auto_open_live_stream: Option<bool>,
    /// Whether to enable direct play. Default: true.
    pub enable_direct_play: Option<bool>,
    /// Whether to enable direct stream. Default: true.
    pub enable_direct_stream: Option<bool>,
    /// Whether to enable transcoding. Default: true.
    pub enable_transcoding: Option<bool>,
    /// Whether to allow to copy the video stream. Default: true.
    pub allow_video_stream_copy: Option<bool>,
    /// Whether to allow to copy the audio stream. Default: true.
    pub allow_audio_stream_copy: Option<bool>,
    /// The playback info.
    pub playback_info_dto: Option<models::PlaybackInfoDto>
}

/// struct for passing parameters to the method [`open_live_stream`]
#[derive(Clone, Debug)]
pub struct OpenLiveStreamParams {
    /// The open token.
    pub open_token: Option<String>,
    /// The user id.
    pub user_id: Option<String>,
    /// The play session id.
    pub play_session_id: Option<String>,
    /// The maximum streaming bitrate.
    pub max_streaming_bitrate: Option<i32>,
    /// The start time in ticks.
    pub start_time_ticks: Option<i64>,
    /// The audio stream index.
    pub audio_stream_index: Option<i32>,
    /// The subtitle stream index.
    pub subtitle_stream_index: Option<i32>,
    /// The maximum number of audio channels.
    pub max_audio_channels: Option<i32>,
    /// The item id.
    pub item_id: Option<String>,
    /// Whether to enable direct play. Default: true.
    pub enable_direct_play: Option<bool>,
    /// Whether to enable direct stream. Default: true.
    pub enable_direct_stream: Option<bool>,
    /// Always burn-in subtitle when transcoding.
    pub always_burn_in_subtitle_when_transcoding: Option<bool>,
    /// The open live stream dto.
    pub open_live_stream_dto: Option<models::OpenLiveStreamDto>
}


/// struct for typed successes of method [`close_live_stream`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CloseLiveStreamSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_bitrate_test_bytes`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBitrateTestBytesSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_playback_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPlaybackInfoSuccess {
    Status200(models::PlaybackInfoResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_posted_playback_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPostedPlaybackInfoSuccess {
    Status200(models::PlaybackInfoResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`open_live_stream`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OpenLiveStreamSuccess {
    Status200(models::LiveStreamResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`close_live_stream`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CloseLiveStreamError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_bitrate_test_bytes`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBitrateTestBytesError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_playback_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPlaybackInfoError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_posted_playback_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPostedPlaybackInfoError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`open_live_stream`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OpenLiveStreamError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}


pub async fn close_live_stream(configuration: &configuration::Configuration, params: CloseLiveStreamParams) -> Result<ResponseContent<CloseLiveStreamSuccess>, Error<CloseLiveStreamError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let live_stream_id = params.live_stream_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/LiveStreams/Close", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("liveStreamId", &live_stream_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<CloseLiveStreamSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<CloseLiveStreamError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_bitrate_test_bytes(configuration: &configuration::Configuration, params: GetBitrateTestBytesParams) -> Result<ResponseContent<GetBitrateTestBytesSuccess>, Error<GetBitrateTestBytesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let size = params.size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Playback/BitrateTest", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = size {
        local_var_req_builder = local_var_req_builder.query(&[("size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetBitrateTestBytesSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetBitrateTestBytesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_playback_info(configuration: &configuration::Configuration, params: GetPlaybackInfoParams) -> Result<ResponseContent<GetPlaybackInfoSuccess>, Error<GetPlaybackInfoError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let user_id = params.user_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/PlaybackInfo", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("userId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetPlaybackInfoSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetPlaybackInfoError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
pub async fn get_posted_playback_info(configuration: &configuration::Configuration, params: GetPostedPlaybackInfoParams) -> Result<ResponseContent<GetPostedPlaybackInfoSuccess>, Error<GetPostedPlaybackInfoError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let user_id = params.user_id;
    let max_streaming_bitrate = params.max_streaming_bitrate;
    let start_time_ticks = params.start_time_ticks;
    let audio_stream_index = params.audio_stream_index;
    let subtitle_stream_index = params.subtitle_stream_index;
    let max_audio_channels = params.max_audio_channels;
    let media_source_id = params.media_source_id;
    let live_stream_id = params.live_stream_id;
    let auto_open_live_stream = params.auto_open_live_stream;
    let enable_direct_play = params.enable_direct_play;
    let enable_direct_stream = params.enable_direct_stream;
    let enable_transcoding = params.enable_transcoding;
    let allow_video_stream_copy = params.allow_video_stream_copy;
    let allow_audio_stream_copy = params.allow_audio_stream_copy;
    let playback_info_dto = params.playback_info_dto;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/PlaybackInfo", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("userId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_streaming_bitrate {
        local_var_req_builder = local_var_req_builder.query(&[("maxStreamingBitrate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_time_ticks {
        local_var_req_builder = local_var_req_builder.query(&[("startTimeTicks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("audioStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = media_source_id {
        local_var_req_builder = local_var_req_builder.query(&[("mediaSourceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = live_stream_id {
        local_var_req_builder = local_var_req_builder.query(&[("liveStreamId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = auto_open_live_stream {
        local_var_req_builder = local_var_req_builder.query(&[("autoOpenLiveStream", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_direct_play {
        local_var_req_builder = local_var_req_builder.query(&[("enableDirectPlay", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_direct_stream {
        local_var_req_builder = local_var_req_builder.query(&[("enableDirectStream", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_transcoding {
        local_var_req_builder = local_var_req_builder.query(&[("enableTranscoding", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allow_video_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("allowVideoStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allow_audio_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("allowAudioStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&playback_info_dto);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetPostedPlaybackInfoSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetPostedPlaybackInfoError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn open_live_stream(configuration: &configuration::Configuration, params: OpenLiveStreamParams) -> Result<ResponseContent<OpenLiveStreamSuccess>, Error<OpenLiveStreamError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let open_token = params.open_token;
    let user_id = params.user_id;
    let play_session_id = params.play_session_id;
    let max_streaming_bitrate = params.max_streaming_bitrate;
    let start_time_ticks = params.start_time_ticks;
    let audio_stream_index = params.audio_stream_index;
    let subtitle_stream_index = params.subtitle_stream_index;
    let max_audio_channels = params.max_audio_channels;
    let item_id = params.item_id;
    let enable_direct_play = params.enable_direct_play;
    let enable_direct_stream = params.enable_direct_stream;
    let always_burn_in_subtitle_when_transcoding = params.always_burn_in_subtitle_when_transcoding;
    let open_live_stream_dto = params.open_live_stream_dto;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/LiveStreams/Open", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = open_token {
        local_var_req_builder = local_var_req_builder.query(&[("openToken", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("userId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = play_session_id {
        local_var_req_builder = local_var_req_builder.query(&[("playSessionId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_streaming_bitrate {
        local_var_req_builder = local_var_req_builder.query(&[("maxStreamingBitrate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_time_ticks {
        local_var_req_builder = local_var_req_builder.query(&[("startTimeTicks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("audioStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = item_id {
        local_var_req_builder = local_var_req_builder.query(&[("itemId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_direct_play {
        local_var_req_builder = local_var_req_builder.query(&[("enableDirectPlay", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_direct_stream {
        local_var_req_builder = local_var_req_builder.query(&[("enableDirectStream", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = always_burn_in_subtitle_when_transcoding {
        local_var_req_builder = local_var_req_builder.query(&[("alwaysBurnInSubtitleWhenTranscoding", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&open_live_stream_dto);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<OpenLiveStreamSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<OpenLiveStreamError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

