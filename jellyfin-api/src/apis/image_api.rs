/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`delete_item_image`]
#[derive(Clone, Debug)]
pub struct DeleteItemImageParams {
    /// Item id.
    pub item_id: String,
    /// Image type.
    pub image_type: String,
    /// The image index.
    pub image_index: Option<i32>
}

/// struct for passing parameters to the method [`delete_item_image_by_index`]
#[derive(Clone, Debug)]
pub struct DeleteItemImageByIndexParams {
    /// Item id.
    pub item_id: String,
    /// Image type.
    pub image_type: String,
    /// The image index.
    pub image_index: i32
}

/// struct for passing parameters to the method [`delete_user_image`]
#[derive(Clone, Debug)]
pub struct DeleteUserImageParams {
    /// User Id.
    pub user_id: Option<String>
}

/// struct for passing parameters to the method [`get_artist_image`]
#[derive(Clone, Debug)]
pub struct GetArtistImageParams {
    /// Artist name.
    pub name: String,
    /// Image type.
    pub image_type: String,
    /// Image index.
    pub image_index: i32,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: Option<String>,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>
}

/// struct for passing parameters to the method [`get_genre_image`]
#[derive(Clone, Debug)]
pub struct GetGenreImageParams {
    /// Genre name.
    pub name: String,
    /// Image type.
    pub image_type: String,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: Option<String>,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>,
    /// Image index.
    pub image_index: Option<i32>
}

/// struct for passing parameters to the method [`get_genre_image_by_index`]
#[derive(Clone, Debug)]
pub struct GetGenreImageByIndexParams {
    /// Genre name.
    pub name: String,
    /// Image type.
    pub image_type: String,
    /// Image index.
    pub image_index: i32,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: Option<String>,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>
}

/// struct for passing parameters to the method [`get_item_image`]
#[derive(Clone, Debug)]
pub struct GetItemImageParams {
    /// Item id.
    pub item_id: String,
    /// Image type.
    pub image_type: String,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
    pub format: Option<String>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>,
    /// Image index.
    pub image_index: Option<i32>
}

/// struct for passing parameters to the method [`get_item_image2`]
#[derive(Clone, Debug)]
pub struct GetItemImage2Params {
    /// Item id.
    pub item_id: String,
    /// Image type.
    pub image_type: String,
    /// The maximum image width to return.
    pub max_width: i32,
    /// The maximum image height to return.
    pub max_height: i32,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: String,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: String,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: f64,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: i32,
    /// Image index.
    pub image_index: i32,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>
}

/// struct for passing parameters to the method [`get_item_image_by_index`]
#[derive(Clone, Debug)]
pub struct GetItemImageByIndexParams {
    /// Item id.
    pub item_id: String,
    /// Image type.
    pub image_type: String,
    /// Image index.
    pub image_index: i32,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
    pub format: Option<String>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>
}

/// struct for passing parameters to the method [`get_item_image_infos`]
#[derive(Clone, Debug)]
pub struct GetItemImageInfosParams {
    /// Item id.
    pub item_id: String
}

/// struct for passing parameters to the method [`get_music_genre_image`]
#[derive(Clone, Debug)]
pub struct GetMusicGenreImageParams {
    /// Music genre name.
    pub name: String,
    /// Image type.
    pub image_type: String,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: Option<String>,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>,
    /// Image index.
    pub image_index: Option<i32>
}

/// struct for passing parameters to the method [`get_music_genre_image_by_index`]
#[derive(Clone, Debug)]
pub struct GetMusicGenreImageByIndexParams {
    /// Music genre name.
    pub name: String,
    /// Image type.
    pub image_type: String,
    /// Image index.
    pub image_index: i32,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: Option<String>,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>
}

/// struct for passing parameters to the method [`get_person_image`]
#[derive(Clone, Debug)]
pub struct GetPersonImageParams {
    /// Person name.
    pub name: String,
    /// Image type.
    pub image_type: String,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: Option<String>,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>,
    /// Image index.
    pub image_index: Option<i32>
}

/// struct for passing parameters to the method [`get_person_image_by_index`]
#[derive(Clone, Debug)]
pub struct GetPersonImageByIndexParams {
    /// Person name.
    pub name: String,
    /// Image type.
    pub image_type: String,
    /// Image index.
    pub image_index: i32,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: Option<String>,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>
}

/// struct for passing parameters to the method [`get_splashscreen`]
#[derive(Clone, Debug)]
pub struct GetSplashscreenParams {
    /// Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: Option<String>,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Blur image.
    pub blur: Option<i32>,
    /// Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>,
    /// Quality setting, from 0-100.
    pub quality: Option<i32>
}

/// struct for passing parameters to the method [`get_studio_image`]
#[derive(Clone, Debug)]
pub struct GetStudioImageParams {
    /// Studio name.
    pub name: String,
    /// Image type.
    pub image_type: String,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: Option<String>,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>,
    /// Image index.
    pub image_index: Option<i32>
}

/// struct for passing parameters to the method [`get_studio_image_by_index`]
#[derive(Clone, Debug)]
pub struct GetStudioImageByIndexParams {
    /// Studio name.
    pub name: String,
    /// Image type.
    pub image_type: String,
    /// Image index.
    pub image_index: i32,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: Option<String>,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>
}

/// struct for passing parameters to the method [`get_user_image`]
#[derive(Clone, Debug)]
pub struct GetUserImageParams {
    /// User id.
    pub user_id: Option<String>,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: Option<String>,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>,
    /// Image index.
    pub image_index: Option<i32>
}

/// struct for passing parameters to the method [`head_artist_image`]
#[derive(Clone, Debug)]
pub struct HeadArtistImageParams {
    /// Artist name.
    pub name: String,
    /// Image type.
    pub image_type: String,
    /// Image index.
    pub image_index: i32,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: Option<String>,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>
}

/// struct for passing parameters to the method [`head_genre_image`]
#[derive(Clone, Debug)]
pub struct HeadGenreImageParams {
    /// Genre name.
    pub name: String,
    /// Image type.
    pub image_type: String,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: Option<String>,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>,
    /// Image index.
    pub image_index: Option<i32>
}

/// struct for passing parameters to the method [`head_genre_image_by_index`]
#[derive(Clone, Debug)]
pub struct HeadGenreImageByIndexParams {
    /// Genre name.
    pub name: String,
    /// Image type.
    pub image_type: String,
    /// Image index.
    pub image_index: i32,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: Option<String>,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>
}

/// struct for passing parameters to the method [`head_item_image`]
#[derive(Clone, Debug)]
pub struct HeadItemImageParams {
    /// Item id.
    pub item_id: String,
    /// Image type.
    pub image_type: String,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
    pub format: Option<String>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>,
    /// Image index.
    pub image_index: Option<i32>
}

/// struct for passing parameters to the method [`head_item_image2`]
#[derive(Clone, Debug)]
pub struct HeadItemImage2Params {
    /// Item id.
    pub item_id: String,
    /// Image type.
    pub image_type: String,
    /// The maximum image width to return.
    pub max_width: i32,
    /// The maximum image height to return.
    pub max_height: i32,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: String,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: String,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: f64,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: i32,
    /// Image index.
    pub image_index: i32,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>
}

/// struct for passing parameters to the method [`head_item_image_by_index`]
#[derive(Clone, Debug)]
pub struct HeadItemImageByIndexParams {
    /// Item id.
    pub item_id: String,
    /// Image type.
    pub image_type: String,
    /// Image index.
    pub image_index: i32,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
    pub format: Option<String>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>
}

/// struct for passing parameters to the method [`head_music_genre_image`]
#[derive(Clone, Debug)]
pub struct HeadMusicGenreImageParams {
    /// Music genre name.
    pub name: String,
    /// Image type.
    pub image_type: String,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: Option<String>,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>,
    /// Image index.
    pub image_index: Option<i32>
}

/// struct for passing parameters to the method [`head_music_genre_image_by_index`]
#[derive(Clone, Debug)]
pub struct HeadMusicGenreImageByIndexParams {
    /// Music genre name.
    pub name: String,
    /// Image type.
    pub image_type: String,
    /// Image index.
    pub image_index: i32,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: Option<String>,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>
}

/// struct for passing parameters to the method [`head_person_image`]
#[derive(Clone, Debug)]
pub struct HeadPersonImageParams {
    /// Person name.
    pub name: String,
    /// Image type.
    pub image_type: String,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: Option<String>,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>,
    /// Image index.
    pub image_index: Option<i32>
}

/// struct for passing parameters to the method [`head_person_image_by_index`]
#[derive(Clone, Debug)]
pub struct HeadPersonImageByIndexParams {
    /// Person name.
    pub name: String,
    /// Image type.
    pub image_type: String,
    /// Image index.
    pub image_index: i32,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: Option<String>,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>
}

/// struct for passing parameters to the method [`head_studio_image`]
#[derive(Clone, Debug)]
pub struct HeadStudioImageParams {
    /// Studio name.
    pub name: String,
    /// Image type.
    pub image_type: String,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: Option<String>,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>,
    /// Image index.
    pub image_index: Option<i32>
}

/// struct for passing parameters to the method [`head_studio_image_by_index`]
#[derive(Clone, Debug)]
pub struct HeadStudioImageByIndexParams {
    /// Studio name.
    pub name: String,
    /// Image type.
    pub image_type: String,
    /// Image index.
    pub image_index: i32,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: Option<String>,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>
}

/// struct for passing parameters to the method [`head_user_image`]
#[derive(Clone, Debug)]
pub struct HeadUserImageParams {
    /// User id.
    pub user_id: Option<String>,
    /// Optional. Supply the cache tag from the item object to receive strong caching headers.
    pub tag: Option<String>,
    /// Determines the output format of the image - original,gif,jpg,png.
    pub format: Option<String>,
    /// The maximum image width to return.
    pub max_width: Option<i32>,
    /// The maximum image height to return.
    pub max_height: Option<i32>,
    /// Optional. Percent to render for the percent played overlay.
    pub percent_played: Option<f64>,
    /// Optional. Unplayed count overlay to render.
    pub unplayed_count: Option<i32>,
    /// The fixed image width to return.
    pub width: Option<i32>,
    /// The fixed image height to return.
    pub height: Option<i32>,
    /// Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
    pub quality: Option<i32>,
    /// Width of box to fill.
    pub fill_width: Option<i32>,
    /// Height of box to fill.
    pub fill_height: Option<i32>,
    /// Optional. Blur image.
    pub blur: Option<i32>,
    /// Optional. Apply a background color for transparent images.
    pub background_color: Option<String>,
    /// Optional. Apply a foreground layer on top of the image.
    pub foreground_layer: Option<String>,
    /// Image index.
    pub image_index: Option<i32>
}

/// struct for passing parameters to the method [`post_user_image`]
#[derive(Clone, Debug)]
pub struct PostUserImageParams {
    /// User Id.
    pub user_id: Option<String>,
    pub body: Option<std::path::PathBuf>
}

/// struct for passing parameters to the method [`set_item_image`]
#[derive(Clone, Debug)]
pub struct SetItemImageParams {
    /// Item id.
    pub item_id: String,
    /// Image type.
    pub image_type: String,
    pub body: Option<std::path::PathBuf>
}

/// struct for passing parameters to the method [`set_item_image_by_index`]
#[derive(Clone, Debug)]
pub struct SetItemImageByIndexParams {
    /// Item id.
    pub item_id: String,
    /// Image type.
    pub image_type: String,
    /// (Unused) Image index.
    pub image_index: i32,
    pub body: Option<std::path::PathBuf>
}

/// struct for passing parameters to the method [`update_item_image_index`]
#[derive(Clone, Debug)]
pub struct UpdateItemImageIndexParams {
    /// Item id.
    pub item_id: String,
    /// Image type.
    pub image_type: String,
    /// Old image index.
    pub image_index: i32,
    /// New image index.
    pub new_index: i32
}

/// struct for passing parameters to the method [`upload_custom_splashscreen`]
#[derive(Clone, Debug)]
pub struct UploadCustomSplashscreenParams {
    pub body: Option<std::path::PathBuf>
}


/// struct for typed successes of method [`delete_custom_splashscreen`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomSplashscreenSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`delete_item_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteItemImageSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`delete_item_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteItemImageByIndexSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`delete_user_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteUserImageSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_artist_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetArtistImageSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_genre_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetGenreImageSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_genre_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetGenreImageByIndexSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_item_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetItemImageSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_item_image2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetItemImage2Success {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_item_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetItemImageByIndexSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_item_image_infos`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetItemImageInfosSuccess {
    Status200(Vec<models::ImageInfo>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_music_genre_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMusicGenreImageSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_music_genre_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMusicGenreImageByIndexSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_person_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPersonImageSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_person_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPersonImageByIndexSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_splashscreen`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSplashscreenSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_studio_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetStudioImageSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_studio_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetStudioImageByIndexSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_user_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetUserImageSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`head_artist_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadArtistImageSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`head_genre_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadGenreImageSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`head_genre_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadGenreImageByIndexSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`head_item_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadItemImageSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`head_item_image2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadItemImage2Success {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`head_item_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadItemImageByIndexSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`head_music_genre_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadMusicGenreImageSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`head_music_genre_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadMusicGenreImageByIndexSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`head_person_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadPersonImageSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`head_person_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadPersonImageByIndexSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`head_studio_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadStudioImageSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`head_studio_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadStudioImageByIndexSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`head_user_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadUserImageSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`post_user_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostUserImageSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`set_item_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetItemImageSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`set_item_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetItemImageByIndexSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`update_item_image_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateItemImageIndexSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`upload_custom_splashscreen`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UploadCustomSplashscreenSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_custom_splashscreen`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomSplashscreenError {
    Status403(),
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_item_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteItemImageError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_item_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteItemImageByIndexError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_user_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteUserImageError {
    Status403(models::ProblemDetails),
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_artist_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetArtistImageError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_genre_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetGenreImageError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_genre_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetGenreImageByIndexError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_item_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetItemImageError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_item_image2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetItemImage2Error {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_item_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetItemImageByIndexError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_item_image_infos`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetItemImageInfosError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_music_genre_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMusicGenreImageError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_music_genre_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMusicGenreImageByIndexError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_person_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPersonImageError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_person_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPersonImageByIndexError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_splashscreen`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSplashscreenError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_studio_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetStudioImageError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_studio_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetStudioImageByIndexError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_user_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetUserImageError {
    Status400(models::ProblemDetails),
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_artist_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadArtistImageError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_genre_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadGenreImageError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_genre_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadGenreImageByIndexError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_item_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadItemImageError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_item_image2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadItemImage2Error {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_item_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadItemImageByIndexError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_music_genre_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadMusicGenreImageError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_music_genre_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadMusicGenreImageByIndexError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_person_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadPersonImageError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_person_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadPersonImageByIndexError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_studio_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadStudioImageError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_studio_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadStudioImageByIndexError {
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_user_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadUserImageError {
    Status400(models::ProblemDetails),
    Status404(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_user_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostUserImageError {
    Status400(models::ProblemDetails),
    Status403(models::ProblemDetails),
    Status404(models::ProblemDetails),
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`set_item_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetItemImageError {
    Status400(models::ProblemDetails),
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`set_item_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetItemImageByIndexError {
    Status400(models::ProblemDetails),
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_item_image_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateItemImageIndexError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`upload_custom_splashscreen`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UploadCustomSplashscreenError {
    Status400(models::ProblemDetails),
    Status403(models::ProblemDetails),
    Status401(),
    UnknownValue(serde_json::Value),
}


pub async fn delete_custom_splashscreen(configuration: &configuration::Configuration) -> Result<ResponseContent<DeleteCustomSplashscreenSuccess>, Error<DeleteCustomSplashscreenError>> {
    let local_var_configuration = configuration;

    // unbox the parameters


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Branding/Splashscreen", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<DeleteCustomSplashscreenSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<DeleteCustomSplashscreenError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_item_image(configuration: &configuration::Configuration, params: DeleteItemImageParams) -> Result<ResponseContent<DeleteItemImageSuccess>, Error<DeleteItemImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let image_type = params.image_type;
    let image_index = params.image_index;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=crate::apis::urlencode(image_type));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<DeleteItemImageSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<DeleteItemImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_item_image_by_index(configuration: &configuration::Configuration, params: DeleteItemImageByIndexParams) -> Result<ResponseContent<DeleteItemImageByIndexSuccess>, Error<DeleteItemImageByIndexError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let image_type = params.image_type;
    let image_index = params.image_index;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=crate::apis::urlencode(image_type), imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<DeleteItemImageByIndexSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<DeleteItemImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_user_image(configuration: &configuration::Configuration, params: DeleteUserImageParams) -> Result<ResponseContent<DeleteUserImageSuccess>, Error<DeleteUserImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let user_id = params.user_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/UserImage", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("userId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<DeleteUserImageSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<DeleteUserImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_artist_image(configuration: &configuration::Configuration, params: GetArtistImageParams) -> Result<ResponseContent<GetArtistImageSuccess>, Error<GetArtistImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let image_type = params.image_type;
    let image_index = params.image_index;
    let tag = params.tag;
    let format = params.format;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Artists/{name}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=crate::apis::urlencode(image_type), imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetArtistImageSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetArtistImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_genre_image(configuration: &configuration::Configuration, params: GetGenreImageParams) -> Result<ResponseContent<GetGenreImageSuccess>, Error<GetGenreImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let image_type = params.image_type;
    let tag = params.tag;
    let format = params.format;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;
    let image_index = params.image_index;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Genres/{name}/Images/{imageType}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=crate::apis::urlencode(image_type));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetGenreImageSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetGenreImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_genre_image_by_index(configuration: &configuration::Configuration, params: GetGenreImageByIndexParams) -> Result<ResponseContent<GetGenreImageByIndexSuccess>, Error<GetGenreImageByIndexError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let image_type = params.image_type;
    let image_index = params.image_index;
    let tag = params.tag;
    let format = params.format;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Genres/{name}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=crate::apis::urlencode(image_type), imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetGenreImageByIndexSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetGenreImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_item_image(configuration: &configuration::Configuration, params: GetItemImageParams) -> Result<ResponseContent<GetItemImageSuccess>, Error<GetItemImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let image_type = params.image_type;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let tag = params.tag;
    let format = params.format;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;
    let image_index = params.image_index;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=crate::apis::urlencode(image_type));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetItemImageSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetItemImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_item_image2(configuration: &configuration::Configuration, params: GetItemImage2Params) -> Result<ResponseContent<GetItemImage2Success>, Error<GetItemImage2Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let image_type = params.image_type;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let tag = params.tag;
    let format = params.format;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let image_index = params.image_index;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=crate::apis::urlencode(image_type), maxWidth=max_width, maxHeight=max_height, tag=crate::apis::urlencode(tag), format=crate::apis::urlencode(format), percentPlayed=percent_played, unplayedCount=unplayed_count, imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetItemImage2Success> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetItemImage2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_item_image_by_index(configuration: &configuration::Configuration, params: GetItemImageByIndexParams) -> Result<ResponseContent<GetItemImageByIndexSuccess>, Error<GetItemImageByIndexError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let image_type = params.image_type;
    let image_index = params.image_index;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let tag = params.tag;
    let format = params.format;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=crate::apis::urlencode(image_type), imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetItemImageByIndexSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetItemImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_item_image_infos(configuration: &configuration::Configuration, params: GetItemImageInfosParams) -> Result<ResponseContent<GetItemImageInfosSuccess>, Error<GetItemImageInfosError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetItemImageInfosSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetItemImageInfosError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_music_genre_image(configuration: &configuration::Configuration, params: GetMusicGenreImageParams) -> Result<ResponseContent<GetMusicGenreImageSuccess>, Error<GetMusicGenreImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let image_type = params.image_type;
    let tag = params.tag;
    let format = params.format;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;
    let image_index = params.image_index;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/MusicGenres/{name}/Images/{imageType}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=crate::apis::urlencode(image_type));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetMusicGenreImageSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetMusicGenreImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_music_genre_image_by_index(configuration: &configuration::Configuration, params: GetMusicGenreImageByIndexParams) -> Result<ResponseContent<GetMusicGenreImageByIndexSuccess>, Error<GetMusicGenreImageByIndexError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let image_type = params.image_type;
    let image_index = params.image_index;
    let tag = params.tag;
    let format = params.format;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/MusicGenres/{name}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=crate::apis::urlencode(image_type), imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetMusicGenreImageByIndexSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetMusicGenreImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_person_image(configuration: &configuration::Configuration, params: GetPersonImageParams) -> Result<ResponseContent<GetPersonImageSuccess>, Error<GetPersonImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let image_type = params.image_type;
    let tag = params.tag;
    let format = params.format;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;
    let image_index = params.image_index;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Persons/{name}/Images/{imageType}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=crate::apis::urlencode(image_type));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetPersonImageSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetPersonImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_person_image_by_index(configuration: &configuration::Configuration, params: GetPersonImageByIndexParams) -> Result<ResponseContent<GetPersonImageByIndexSuccess>, Error<GetPersonImageByIndexError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let image_type = params.image_type;
    let image_index = params.image_index;
    let tag = params.tag;
    let format = params.format;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Persons/{name}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=crate::apis::urlencode(image_type), imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetPersonImageByIndexSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetPersonImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_splashscreen(configuration: &configuration::Configuration, params: GetSplashscreenParams) -> Result<ResponseContent<GetSplashscreenSuccess>, Error<GetSplashscreenError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let tag = params.tag;
    let format = params.format;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let width = params.width;
    let height = params.height;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;
    let quality = params.quality;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Branding/Splashscreen", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetSplashscreenSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetSplashscreenError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_studio_image(configuration: &configuration::Configuration, params: GetStudioImageParams) -> Result<ResponseContent<GetStudioImageSuccess>, Error<GetStudioImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let image_type = params.image_type;
    let tag = params.tag;
    let format = params.format;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;
    let image_index = params.image_index;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Studios/{name}/Images/{imageType}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=crate::apis::urlencode(image_type));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetStudioImageSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetStudioImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_studio_image_by_index(configuration: &configuration::Configuration, params: GetStudioImageByIndexParams) -> Result<ResponseContent<GetStudioImageByIndexSuccess>, Error<GetStudioImageByIndexError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let image_type = params.image_type;
    let image_index = params.image_index;
    let tag = params.tag;
    let format = params.format;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Studios/{name}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=crate::apis::urlencode(image_type), imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetStudioImageByIndexSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetStudioImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_user_image(configuration: &configuration::Configuration, params: GetUserImageParams) -> Result<ResponseContent<GetUserImageSuccess>, Error<GetUserImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let user_id = params.user_id;
    let tag = params.tag;
    let format = params.format;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;
    let image_index = params.image_index;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/UserImage", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("userId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetUserImageSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetUserImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_artist_image(configuration: &configuration::Configuration, params: HeadArtistImageParams) -> Result<ResponseContent<HeadArtistImageSuccess>, Error<HeadArtistImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let image_type = params.image_type;
    let image_index = params.image_index;
    let tag = params.tag;
    let format = params.format;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Artists/{name}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=crate::apis::urlencode(image_type), imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<HeadArtistImageSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<HeadArtistImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_genre_image(configuration: &configuration::Configuration, params: HeadGenreImageParams) -> Result<ResponseContent<HeadGenreImageSuccess>, Error<HeadGenreImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let image_type = params.image_type;
    let tag = params.tag;
    let format = params.format;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;
    let image_index = params.image_index;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Genres/{name}/Images/{imageType}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=crate::apis::urlencode(image_type));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<HeadGenreImageSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<HeadGenreImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_genre_image_by_index(configuration: &configuration::Configuration, params: HeadGenreImageByIndexParams) -> Result<ResponseContent<HeadGenreImageByIndexSuccess>, Error<HeadGenreImageByIndexError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let image_type = params.image_type;
    let image_index = params.image_index;
    let tag = params.tag;
    let format = params.format;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Genres/{name}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=crate::apis::urlencode(image_type), imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<HeadGenreImageByIndexSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<HeadGenreImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_item_image(configuration: &configuration::Configuration, params: HeadItemImageParams) -> Result<ResponseContent<HeadItemImageSuccess>, Error<HeadItemImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let image_type = params.image_type;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let tag = params.tag;
    let format = params.format;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;
    let image_index = params.image_index;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=crate::apis::urlencode(image_type));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<HeadItemImageSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<HeadItemImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_item_image2(configuration: &configuration::Configuration, params: HeadItemImage2Params) -> Result<ResponseContent<HeadItemImage2Success>, Error<HeadItemImage2Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let image_type = params.image_type;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let tag = params.tag;
    let format = params.format;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let image_index = params.image_index;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=crate::apis::urlencode(image_type), maxWidth=max_width, maxHeight=max_height, tag=crate::apis::urlencode(tag), format=crate::apis::urlencode(format), percentPlayed=percent_played, unplayedCount=unplayed_count, imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<HeadItemImage2Success> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<HeadItemImage2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_item_image_by_index(configuration: &configuration::Configuration, params: HeadItemImageByIndexParams) -> Result<ResponseContent<HeadItemImageByIndexSuccess>, Error<HeadItemImageByIndexError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let image_type = params.image_type;
    let image_index = params.image_index;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let tag = params.tag;
    let format = params.format;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=crate::apis::urlencode(image_type), imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<HeadItemImageByIndexSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<HeadItemImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_music_genre_image(configuration: &configuration::Configuration, params: HeadMusicGenreImageParams) -> Result<ResponseContent<HeadMusicGenreImageSuccess>, Error<HeadMusicGenreImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let image_type = params.image_type;
    let tag = params.tag;
    let format = params.format;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;
    let image_index = params.image_index;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/MusicGenres/{name}/Images/{imageType}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=crate::apis::urlencode(image_type));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<HeadMusicGenreImageSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<HeadMusicGenreImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_music_genre_image_by_index(configuration: &configuration::Configuration, params: HeadMusicGenreImageByIndexParams) -> Result<ResponseContent<HeadMusicGenreImageByIndexSuccess>, Error<HeadMusicGenreImageByIndexError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let image_type = params.image_type;
    let image_index = params.image_index;
    let tag = params.tag;
    let format = params.format;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/MusicGenres/{name}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=crate::apis::urlencode(image_type), imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<HeadMusicGenreImageByIndexSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<HeadMusicGenreImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_person_image(configuration: &configuration::Configuration, params: HeadPersonImageParams) -> Result<ResponseContent<HeadPersonImageSuccess>, Error<HeadPersonImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let image_type = params.image_type;
    let tag = params.tag;
    let format = params.format;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;
    let image_index = params.image_index;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Persons/{name}/Images/{imageType}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=crate::apis::urlencode(image_type));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<HeadPersonImageSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<HeadPersonImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_person_image_by_index(configuration: &configuration::Configuration, params: HeadPersonImageByIndexParams) -> Result<ResponseContent<HeadPersonImageByIndexSuccess>, Error<HeadPersonImageByIndexError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let image_type = params.image_type;
    let image_index = params.image_index;
    let tag = params.tag;
    let format = params.format;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Persons/{name}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=crate::apis::urlencode(image_type), imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<HeadPersonImageByIndexSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<HeadPersonImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_studio_image(configuration: &configuration::Configuration, params: HeadStudioImageParams) -> Result<ResponseContent<HeadStudioImageSuccess>, Error<HeadStudioImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let image_type = params.image_type;
    let tag = params.tag;
    let format = params.format;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;
    let image_index = params.image_index;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Studios/{name}/Images/{imageType}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=crate::apis::urlencode(image_type));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<HeadStudioImageSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<HeadStudioImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_studio_image_by_index(configuration: &configuration::Configuration, params: HeadStudioImageByIndexParams) -> Result<ResponseContent<HeadStudioImageByIndexSuccess>, Error<HeadStudioImageByIndexError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let image_type = params.image_type;
    let image_index = params.image_index;
    let tag = params.tag;
    let format = params.format;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Studios/{name}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=crate::apis::urlencode(image_type), imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<HeadStudioImageByIndexSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<HeadStudioImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_user_image(configuration: &configuration::Configuration, params: HeadUserImageParams) -> Result<ResponseContent<HeadUserImageSuccess>, Error<HeadUserImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let user_id = params.user_id;
    let tag = params.tag;
    let format = params.format;
    let max_width = params.max_width;
    let max_height = params.max_height;
    let percent_played = params.percent_played;
    let unplayed_count = params.unplayed_count;
    let width = params.width;
    let height = params.height;
    let quality = params.quality;
    let fill_width = params.fill_width;
    let fill_height = params.fill_height;
    let blur = params.blur;
    let background_color = params.background_color;
    let foreground_layer = params.foreground_layer;
    let image_index = params.image_index;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/UserImage", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("userId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<HeadUserImageSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<HeadUserImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_user_image(configuration: &configuration::Configuration, params: PostUserImageParams) -> Result<ResponseContent<PostUserImageSuccess>, Error<PostUserImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let user_id = params.user_id;
    let body = params.body;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/UserImage", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("userId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<PostUserImageSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<PostUserImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_item_image(configuration: &configuration::Configuration, params: SetItemImageParams) -> Result<ResponseContent<SetItemImageSuccess>, Error<SetItemImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let image_type = params.image_type;
    let body = params.body;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=crate::apis::urlencode(image_type));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<SetItemImageSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<SetItemImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_item_image_by_index(configuration: &configuration::Configuration, params: SetItemImageByIndexParams) -> Result<ResponseContent<SetItemImageByIndexSuccess>, Error<SetItemImageByIndexError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let image_type = params.image_type;
    let image_index = params.image_index;
    let body = params.body;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=crate::apis::urlencode(image_type), imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<SetItemImageByIndexSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<SetItemImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_item_image_index(configuration: &configuration::Configuration, params: UpdateItemImageIndexParams) -> Result<ResponseContent<UpdateItemImageIndexSuccess>, Error<UpdateItemImageIndexError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let image_type = params.image_type;
    let image_index = params.image_index;
    let new_index = params.new_index;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}/{imageIndex}/Index", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=crate::apis::urlencode(image_type), imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("newIndex", &new_index.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<UpdateItemImageIndexSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<UpdateItemImageIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn upload_custom_splashscreen(configuration: &configuration::Configuration, params: UploadCustomSplashscreenParams) -> Result<ResponseContent<UploadCustomSplashscreenSuccess>, Error<UploadCustomSplashscreenError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let body = params.body;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Branding/Splashscreen", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<UploadCustomSplashscreenSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<UploadCustomSplashscreenError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

