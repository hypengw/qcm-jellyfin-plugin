/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`add_item_to_playlist`]
#[derive(Clone, Debug)]
pub struct AddItemToPlaylistParams {
    /// The playlist id.
    pub playlist_id: String,
    /// Item id, comma delimited.
    pub ids: Option<Vec<uuid::Uuid>>,
    /// The userId.
    pub user_id: Option<String>
}

/// struct for passing parameters to the method [`create_playlist`]
#[derive(Clone, Debug)]
pub struct CreatePlaylistParams {
    /// The playlist name.
    pub name: Option<String>,
    /// The item ids.
    pub ids: Option<Vec<uuid::Uuid>>,
    /// The user id.
    pub user_id: Option<String>,
    /// The media type.
    pub media_type: Option<String>,
    /// The create playlist payload.
    pub create_playlist_dto: Option<models::CreatePlaylistDto>
}

/// struct for passing parameters to the method [`get_playlist`]
#[derive(Clone, Debug)]
pub struct GetPlaylistParams {
    /// The playlist id.
    pub playlist_id: String
}

/// struct for passing parameters to the method [`get_playlist_items`]
#[derive(Clone, Debug)]
pub struct GetPlaylistItemsParams {
    /// The playlist id.
    pub playlist_id: String,
    /// User id.
    pub user_id: Option<String>,
    /// Optional. The record index to start at. All items with a lower index will be dropped from the results.
    pub start_index: Option<i32>,
    /// Optional. The maximum number of records to return.
    pub limit: Option<i32>,
    /// Optional. Specify additional fields of information to return in the output.
    pub fields: Option<Vec<models::ItemFields>>,
    /// Optional. Include image information in output.
    pub enable_images: Option<bool>,
    /// Optional. Include user data.
    pub enable_user_data: Option<bool>,
    /// Optional. The max number of images to return, per image type.
    pub image_type_limit: Option<i32>,
    /// Optional. The image types to include in the output.
    pub enable_image_types: Option<Vec<models::ImageType>>
}

/// struct for passing parameters to the method [`get_playlist_user`]
#[derive(Clone, Debug)]
pub struct GetPlaylistUserParams {
    /// The playlist id.
    pub playlist_id: String,
    /// The user id.
    pub user_id: String
}

/// struct for passing parameters to the method [`get_playlist_users`]
#[derive(Clone, Debug)]
pub struct GetPlaylistUsersParams {
    /// The playlist id.
    pub playlist_id: String
}

/// struct for passing parameters to the method [`move_item`]
#[derive(Clone, Debug)]
pub struct MoveItemParams {
    /// The playlist id.
    pub playlist_id: String,
    /// The item id.
    pub item_id: String,
    /// The new index.
    pub new_index: i32
}

/// struct for passing parameters to the method [`remove_item_from_playlist`]
#[derive(Clone, Debug)]
pub struct RemoveItemFromPlaylistParams {
    /// The playlist id.
    pub playlist_id: String,
    /// The item ids, comma delimited.
    pub entry_ids: Option<Vec<String>>
}

/// struct for passing parameters to the method [`remove_user_from_playlist`]
#[derive(Clone, Debug)]
pub struct RemoveUserFromPlaylistParams {
    /// The playlist id.
    pub playlist_id: String,
    /// The user id.
    pub user_id: String
}

/// struct for passing parameters to the method [`update_playlist`]
#[derive(Clone, Debug)]
pub struct UpdatePlaylistParams {
    /// The playlist id.
    pub playlist_id: String,
    /// The Jellyfin.Api.Models.PlaylistDtos.UpdatePlaylistDto id.
    pub update_playlist_dto: models::UpdatePlaylistDto
}

/// struct for passing parameters to the method [`update_playlist_user`]
#[derive(Clone, Debug)]
pub struct UpdatePlaylistUserParams {
    /// The playlist id.
    pub playlist_id: String,
    /// The user id.
    pub user_id: String,
    /// The Jellyfin.Api.Models.PlaylistDtos.UpdatePlaylistUserDto.
    pub update_playlist_user_dto: models::UpdatePlaylistUserDto
}


/// struct for typed successes of method [`add_item_to_playlist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddItemToPlaylistSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`create_playlist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreatePlaylistSuccess {
    Status200(models::PlaylistCreationResult),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_playlist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPlaylistSuccess {
    Status200(models::PlaylistDto),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_playlist_items`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPlaylistItemsSuccess {
    Status200(models::BaseItemDtoQueryResult),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_playlist_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPlaylistUserSuccess {
    Status200(models::PlaylistUserPermissions),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_playlist_users`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPlaylistUsersSuccess {
    Status200(Vec<models::PlaylistUserPermissions>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`move_item`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MoveItemSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`remove_item_from_playlist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RemoveItemFromPlaylistSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`remove_user_from_playlist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RemoveUserFromPlaylistSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`update_playlist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdatePlaylistSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`update_playlist_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdatePlaylistUserSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`add_item_to_playlist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddItemToPlaylistError {
    Status403(models::ProblemDetails),
    Status404(models::ProblemDetails),
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_playlist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreatePlaylistError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_playlist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPlaylistError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_playlist_items`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPlaylistItemsError {
    Status403(models::ProblemDetails),
    Status404(models::ProblemDetails),
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_playlist_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPlaylistUserError {
    Status403(models::ProblemDetails),
    Status404(models::ProblemDetails),
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_playlist_users`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPlaylistUsersError {
    Status403(models::ProblemDetails),
    Status404(models::ProblemDetails),
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`move_item`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MoveItemError {
    Status403(models::ProblemDetails),
    Status404(models::ProblemDetails),
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`remove_item_from_playlist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RemoveItemFromPlaylistError {
    Status403(models::ProblemDetails),
    Status404(models::ProblemDetails),
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`remove_user_from_playlist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RemoveUserFromPlaylistError {
    Status403(models::ProblemDetails),
    Status404(models::ProblemDetails),
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_playlist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdatePlaylistError {
    Status403(models::ProblemDetails),
    Status404(models::ProblemDetails),
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_playlist_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdatePlaylistUserError {
    Status403(models::ProblemDetails),
    Status404(models::ProblemDetails),
    Status401(),
    UnknownValue(serde_json::Value),
}


pub async fn add_item_to_playlist(configuration: &configuration::Configuration, params: AddItemToPlaylistParams) -> Result<ResponseContent<AddItemToPlaylistSuccess>, Error<AddItemToPlaylistError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let playlist_id = params.playlist_id;
    let ids = params.ids;
    let user_id = params.user_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Playlists/{playlistId}/Items", local_var_configuration.base_path, playlistId=crate::apis::urlencode(playlist_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = ids {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("ids", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("userId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<AddItemToPlaylistSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<AddItemToPlaylistError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
pub async fn create_playlist(configuration: &configuration::Configuration, params: CreatePlaylistParams) -> Result<ResponseContent<CreatePlaylistSuccess>, Error<CreatePlaylistError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let ids = params.ids;
    let user_id = params.user_id;
    let media_type = params.media_type;
    let create_playlist_dto = params.create_playlist_dto;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Playlists", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ids {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("ids", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("userId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = media_type {
        local_var_req_builder = local_var_req_builder.query(&[("mediaType", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&create_playlist_dto);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<CreatePlaylistSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<CreatePlaylistError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_playlist(configuration: &configuration::Configuration, params: GetPlaylistParams) -> Result<ResponseContent<GetPlaylistSuccess>, Error<GetPlaylistError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let playlist_id = params.playlist_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Playlists/{playlistId}", local_var_configuration.base_path, playlistId=crate::apis::urlencode(playlist_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetPlaylistSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetPlaylistError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_playlist_items(configuration: &configuration::Configuration, params: GetPlaylistItemsParams) -> Result<ResponseContent<GetPlaylistItemsSuccess>, Error<GetPlaylistItemsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let playlist_id = params.playlist_id;
    let user_id = params.user_id;
    let start_index = params.start_index;
    let limit = params.limit;
    let fields = params.fields;
    let enable_images = params.enable_images;
    let enable_user_data = params.enable_user_data;
    let image_type_limit = params.image_type_limit;
    let enable_image_types = params.enable_image_types;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Playlists/{playlistId}/Items", local_var_configuration.base_path, playlistId=crate::apis::urlencode(playlist_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("userId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_index {
        local_var_req_builder = local_var_req_builder.query(&[("startIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("fields".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("fields", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = enable_images {
        local_var_req_builder = local_var_req_builder.query(&[("enableImages", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_user_data {
        local_var_req_builder = local_var_req_builder.query(&[("enableUserData", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_type_limit {
        local_var_req_builder = local_var_req_builder.query(&[("imageTypeLimit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_image_types {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("enableImageTypes".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("enableImageTypes", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetPlaylistItemsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetPlaylistItemsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_playlist_user(configuration: &configuration::Configuration, params: GetPlaylistUserParams) -> Result<ResponseContent<GetPlaylistUserSuccess>, Error<GetPlaylistUserError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let playlist_id = params.playlist_id;
    let user_id = params.user_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Playlists/{playlistId}/Users/{userId}", local_var_configuration.base_path, playlistId=crate::apis::urlencode(playlist_id), userId=crate::apis::urlencode(user_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetPlaylistUserSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetPlaylistUserError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_playlist_users(configuration: &configuration::Configuration, params: GetPlaylistUsersParams) -> Result<ResponseContent<GetPlaylistUsersSuccess>, Error<GetPlaylistUsersError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let playlist_id = params.playlist_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Playlists/{playlistId}/Users", local_var_configuration.base_path, playlistId=crate::apis::urlencode(playlist_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetPlaylistUsersSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetPlaylistUsersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn move_item(configuration: &configuration::Configuration, params: MoveItemParams) -> Result<ResponseContent<MoveItemSuccess>, Error<MoveItemError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let playlist_id = params.playlist_id;
    let item_id = params.item_id;
    let new_index = params.new_index;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Playlists/{playlistId}/Items/{itemId}/Move/{newIndex}", local_var_configuration.base_path, playlistId=crate::apis::urlencode(playlist_id), itemId=crate::apis::urlencode(item_id), newIndex=new_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<MoveItemSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<MoveItemError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn remove_item_from_playlist(configuration: &configuration::Configuration, params: RemoveItemFromPlaylistParams) -> Result<ResponseContent<RemoveItemFromPlaylistSuccess>, Error<RemoveItemFromPlaylistError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let playlist_id = params.playlist_id;
    let entry_ids = params.entry_ids;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Playlists/{playlistId}/Items", local_var_configuration.base_path, playlistId=crate::apis::urlencode(playlist_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = entry_ids {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("entryIds".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("entryIds", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<RemoveItemFromPlaylistSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<RemoveItemFromPlaylistError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn remove_user_from_playlist(configuration: &configuration::Configuration, params: RemoveUserFromPlaylistParams) -> Result<ResponseContent<RemoveUserFromPlaylistSuccess>, Error<RemoveUserFromPlaylistError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let playlist_id = params.playlist_id;
    let user_id = params.user_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Playlists/{playlistId}/Users/{userId}", local_var_configuration.base_path, playlistId=crate::apis::urlencode(playlist_id), userId=crate::apis::urlencode(user_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<RemoveUserFromPlaylistSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<RemoveUserFromPlaylistError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_playlist(configuration: &configuration::Configuration, params: UpdatePlaylistParams) -> Result<ResponseContent<UpdatePlaylistSuccess>, Error<UpdatePlaylistError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let playlist_id = params.playlist_id;
    let update_playlist_dto = params.update_playlist_dto;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Playlists/{playlistId}", local_var_configuration.base_path, playlistId=crate::apis::urlencode(playlist_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&update_playlist_dto);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<UpdatePlaylistSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<UpdatePlaylistError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_playlist_user(configuration: &configuration::Configuration, params: UpdatePlaylistUserParams) -> Result<ResponseContent<UpdatePlaylistUserSuccess>, Error<UpdatePlaylistUserError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let playlist_id = params.playlist_id;
    let user_id = params.user_id;
    let update_playlist_user_dto = params.update_playlist_user_dto;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Playlists/{playlistId}/Users/{userId}", local_var_configuration.base_path, playlistId=crate::apis::urlencode(playlist_id), userId=crate::apis::urlencode(user_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&update_playlist_user_dto);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<UpdatePlaylistUserSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<UpdatePlaylistUserError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

