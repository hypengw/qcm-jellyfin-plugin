/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`get_movie_recommendations`]
#[derive(Clone, Debug)]
pub struct GetMovieRecommendationsParams {
    /// Optional. Filter by user id, and attach user data.
    pub user_id: Option<String>,
    /// Specify this to localize the search to a specific item or folder. Omit to use the root.
    pub parent_id: Option<String>,
    /// Optional. The fields to return.
    pub fields: Option<Vec<models::ItemFields>>,
    /// The max number of categories to return.
    pub category_limit: Option<i32>,
    /// The max number of items to return per category.
    pub item_limit: Option<i32>
}


/// struct for typed successes of method [`get_movie_recommendations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMovieRecommendationsSuccess {
    Status200(Vec<models::RecommendationDto>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_movie_recommendations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMovieRecommendationsError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}


pub async fn get_movie_recommendations(configuration: &configuration::Configuration, params: GetMovieRecommendationsParams) -> Result<ResponseContent<GetMovieRecommendationsSuccess>, Error<GetMovieRecommendationsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let user_id = params.user_id;
    let parent_id = params.parent_id;
    let fields = params.fields;
    let category_limit = params.category_limit;
    let item_limit = params.item_limit;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Movies/Recommendations", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("userId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_id {
        local_var_req_builder = local_var_req_builder.query(&[("parentId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("fields".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("fields", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = category_limit {
        local_var_req_builder = local_var_req_builder.query(&[("categoryLimit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = item_limit {
        local_var_req_builder = local_var_req_builder.query(&[("itemLimit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetMovieRecommendationsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetMovieRecommendationsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

