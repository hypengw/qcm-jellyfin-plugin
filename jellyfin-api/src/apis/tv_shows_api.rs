/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`get_episodes`]
#[derive(Clone, Debug)]
pub struct GetEpisodesParams {
    /// The series id.
    pub series_id: String,
    /// The user id.
    pub user_id: Option<String>,
    /// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
    pub fields: Option<Vec<models::ItemFields>>,
    /// Optional filter by season number.
    pub season: Option<i32>,
    /// Optional. Filter by season id.
    pub season_id: Option<String>,
    /// Optional. Filter by items that are missing episodes or not.
    pub is_missing: Option<bool>,
    /// Optional. Return items that are siblings of a supplied item.
    pub adjacent_to: Option<String>,
    /// Optional. Skip through the list until a given item is found.
    pub start_item_id: Option<String>,
    /// Optional. The record index to start at. All items with a lower index will be dropped from the results.
    pub start_index: Option<i32>,
    /// Optional. The maximum number of records to return.
    pub limit: Option<i32>,
    /// Optional, include image information in output.
    pub enable_images: Option<bool>,
    /// Optional, the max number of images to return, per image type.
    pub image_type_limit: Option<i32>,
    /// Optional. The image types to include in the output.
    pub enable_image_types: Option<Vec<models::ImageType>>,
    /// Optional. Include user data.
    pub enable_user_data: Option<bool>,
    /// Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
    pub sort_by: Option<String>
}

/// struct for passing parameters to the method [`get_next_up`]
#[derive(Clone, Debug)]
pub struct GetNextUpParams {
    /// The user id of the user to get the next up episodes for.
    pub user_id: Option<String>,
    /// Optional. The record index to start at. All items with a lower index will be dropped from the results.
    pub start_index: Option<i32>,
    /// Optional. The maximum number of records to return.
    pub limit: Option<i32>,
    /// Optional. Specify additional fields of information to return in the output.
    pub fields: Option<Vec<models::ItemFields>>,
    /// Optional. Filter by series id.
    pub series_id: Option<String>,
    /// Optional. Specify this to localize the search to a specific item or folder. Omit to use the root.
    pub parent_id: Option<String>,
    /// Optional. Include image information in output.
    pub enable_images: Option<bool>,
    /// Optional. The max number of images to return, per image type.
    pub image_type_limit: Option<i32>,
    /// Optional. The image types to include in the output.
    pub enable_image_types: Option<Vec<models::ImageType>>,
    /// Optional. Include user data.
    pub enable_user_data: Option<bool>,
    /// Optional. Starting date of shows to show in Next Up section.
    pub next_up_date_cutoff: Option<String>,
    /// Whether to enable the total records count. Defaults to true.
    pub enable_total_record_count: Option<bool>,
    /// Whether to disable sending the first episode in a series as next up.
    pub disable_first_episode: Option<bool>,
    /// Whether to include resumable episodes in next up results.
    pub enable_resumable: Option<bool>,
    /// Whether to include watched episodes in next up results.
    pub enable_rewatching: Option<bool>
}

/// struct for passing parameters to the method [`get_seasons`]
#[derive(Clone, Debug)]
pub struct GetSeasonsParams {
    /// The series id.
    pub series_id: String,
    /// The user id.
    pub user_id: Option<String>,
    /// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
    pub fields: Option<Vec<models::ItemFields>>,
    /// Optional. Filter by special season.
    pub is_special_season: Option<bool>,
    /// Optional. Filter by items that are missing episodes or not.
    pub is_missing: Option<bool>,
    /// Optional. Return items that are siblings of a supplied item.
    pub adjacent_to: Option<String>,
    /// Optional. Include image information in output.
    pub enable_images: Option<bool>,
    /// Optional. The max number of images to return, per image type.
    pub image_type_limit: Option<i32>,
    /// Optional. The image types to include in the output.
    pub enable_image_types: Option<Vec<models::ImageType>>,
    /// Optional. Include user data.
    pub enable_user_data: Option<bool>
}

/// struct for passing parameters to the method [`get_upcoming_episodes`]
#[derive(Clone, Debug)]
pub struct GetUpcomingEpisodesParams {
    /// The user id of the user to get the upcoming episodes for.
    pub user_id: Option<String>,
    /// Optional. The record index to start at. All items with a lower index will be dropped from the results.
    pub start_index: Option<i32>,
    /// Optional. The maximum number of records to return.
    pub limit: Option<i32>,
    /// Optional. Specify additional fields of information to return in the output.
    pub fields: Option<Vec<models::ItemFields>>,
    /// Optional. Specify this to localize the search to a specific item or folder. Omit to use the root.
    pub parent_id: Option<String>,
    /// Optional. Include image information in output.
    pub enable_images: Option<bool>,
    /// Optional. The max number of images to return, per image type.
    pub image_type_limit: Option<i32>,
    /// Optional. The image types to include in the output.
    pub enable_image_types: Option<Vec<models::ImageType>>,
    /// Optional. Include user data.
    pub enable_user_data: Option<bool>
}


/// struct for typed successes of method [`get_episodes`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetEpisodesSuccess {
    Status200(models::BaseItemDtoQueryResult),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_next_up`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetNextUpSuccess {
    Status200(models::BaseItemDtoQueryResult),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_seasons`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSeasonsSuccess {
    Status200(models::BaseItemDtoQueryResult),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_upcoming_episodes`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetUpcomingEpisodesSuccess {
    Status200(models::BaseItemDtoQueryResult),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_episodes`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetEpisodesError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_next_up`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetNextUpError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_seasons`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSeasonsError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_upcoming_episodes`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetUpcomingEpisodesError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}


pub async fn get_episodes(configuration: &configuration::Configuration, params: GetEpisodesParams) -> Result<ResponseContent<GetEpisodesSuccess>, Error<GetEpisodesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let series_id = params.series_id;
    let user_id = params.user_id;
    let fields = params.fields;
    let season = params.season;
    let season_id = params.season_id;
    let is_missing = params.is_missing;
    let adjacent_to = params.adjacent_to;
    let start_item_id = params.start_item_id;
    let start_index = params.start_index;
    let limit = params.limit;
    let enable_images = params.enable_images;
    let image_type_limit = params.image_type_limit;
    let enable_image_types = params.enable_image_types;
    let enable_user_data = params.enable_user_data;
    let sort_by = params.sort_by;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Shows/{seriesId}/Episodes", local_var_configuration.base_path, seriesId=crate::apis::urlencode(series_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("userId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("fields".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("fields", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = season {
        local_var_req_builder = local_var_req_builder.query(&[("season", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = season_id {
        local_var_req_builder = local_var_req_builder.query(&[("seasonId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_missing {
        local_var_req_builder = local_var_req_builder.query(&[("isMissing", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = adjacent_to {
        local_var_req_builder = local_var_req_builder.query(&[("adjacentTo", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_item_id {
        local_var_req_builder = local_var_req_builder.query(&[("startItemId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_index {
        local_var_req_builder = local_var_req_builder.query(&[("startIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_images {
        local_var_req_builder = local_var_req_builder.query(&[("enableImages", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_type_limit {
        local_var_req_builder = local_var_req_builder.query(&[("imageTypeLimit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_image_types {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("enableImageTypes".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("enableImageTypes", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = enable_user_data {
        local_var_req_builder = local_var_req_builder.query(&[("enableUserData", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort_by {
        local_var_req_builder = local_var_req_builder.query(&[("sortBy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetEpisodesSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetEpisodesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_next_up(configuration: &configuration::Configuration, params: GetNextUpParams) -> Result<ResponseContent<GetNextUpSuccess>, Error<GetNextUpError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let user_id = params.user_id;
    let start_index = params.start_index;
    let limit = params.limit;
    let fields = params.fields;
    let series_id = params.series_id;
    let parent_id = params.parent_id;
    let enable_images = params.enable_images;
    let image_type_limit = params.image_type_limit;
    let enable_image_types = params.enable_image_types;
    let enable_user_data = params.enable_user_data;
    let next_up_date_cutoff = params.next_up_date_cutoff;
    let enable_total_record_count = params.enable_total_record_count;
    let disable_first_episode = params.disable_first_episode;
    let enable_resumable = params.enable_resumable;
    let enable_rewatching = params.enable_rewatching;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Shows/NextUp", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("userId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_index {
        local_var_req_builder = local_var_req_builder.query(&[("startIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("fields".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("fields", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = series_id {
        local_var_req_builder = local_var_req_builder.query(&[("seriesId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_id {
        local_var_req_builder = local_var_req_builder.query(&[("parentId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_images {
        local_var_req_builder = local_var_req_builder.query(&[("enableImages", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_type_limit {
        local_var_req_builder = local_var_req_builder.query(&[("imageTypeLimit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_image_types {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("enableImageTypes".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("enableImageTypes", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = enable_user_data {
        local_var_req_builder = local_var_req_builder.query(&[("enableUserData", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next_up_date_cutoff {
        local_var_req_builder = local_var_req_builder.query(&[("nextUpDateCutoff", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_total_record_count {
        local_var_req_builder = local_var_req_builder.query(&[("enableTotalRecordCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = disable_first_episode {
        local_var_req_builder = local_var_req_builder.query(&[("disableFirstEpisode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_resumable {
        local_var_req_builder = local_var_req_builder.query(&[("enableResumable", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_rewatching {
        local_var_req_builder = local_var_req_builder.query(&[("enableRewatching", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetNextUpSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetNextUpError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_seasons(configuration: &configuration::Configuration, params: GetSeasonsParams) -> Result<ResponseContent<GetSeasonsSuccess>, Error<GetSeasonsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let series_id = params.series_id;
    let user_id = params.user_id;
    let fields = params.fields;
    let is_special_season = params.is_special_season;
    let is_missing = params.is_missing;
    let adjacent_to = params.adjacent_to;
    let enable_images = params.enable_images;
    let image_type_limit = params.image_type_limit;
    let enable_image_types = params.enable_image_types;
    let enable_user_data = params.enable_user_data;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Shows/{seriesId}/Seasons", local_var_configuration.base_path, seriesId=crate::apis::urlencode(series_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("userId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("fields".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("fields", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = is_special_season {
        local_var_req_builder = local_var_req_builder.query(&[("isSpecialSeason", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_missing {
        local_var_req_builder = local_var_req_builder.query(&[("isMissing", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = adjacent_to {
        local_var_req_builder = local_var_req_builder.query(&[("adjacentTo", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_images {
        local_var_req_builder = local_var_req_builder.query(&[("enableImages", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_type_limit {
        local_var_req_builder = local_var_req_builder.query(&[("imageTypeLimit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_image_types {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("enableImageTypes".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("enableImageTypes", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = enable_user_data {
        local_var_req_builder = local_var_req_builder.query(&[("enableUserData", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetSeasonsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetSeasonsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_upcoming_episodes(configuration: &configuration::Configuration, params: GetUpcomingEpisodesParams) -> Result<ResponseContent<GetUpcomingEpisodesSuccess>, Error<GetUpcomingEpisodesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let user_id = params.user_id;
    let start_index = params.start_index;
    let limit = params.limit;
    let fields = params.fields;
    let parent_id = params.parent_id;
    let enable_images = params.enable_images;
    let image_type_limit = params.image_type_limit;
    let enable_image_types = params.enable_image_types;
    let enable_user_data = params.enable_user_data;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Shows/Upcoming", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("userId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_index {
        local_var_req_builder = local_var_req_builder.query(&[("startIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("fields".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("fields", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = parent_id {
        local_var_req_builder = local_var_req_builder.query(&[("parentId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_images {
        local_var_req_builder = local_var_req_builder.query(&[("enableImages", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_type_limit {
        local_var_req_builder = local_var_req_builder.query(&[("imageTypeLimit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_image_types {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("enableImageTypes".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("enableImageTypes", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = enable_user_data {
        local_var_req_builder = local_var_req_builder.query(&[("enableUserData", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetUpcomingEpisodesSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetUpcomingEpisodesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

