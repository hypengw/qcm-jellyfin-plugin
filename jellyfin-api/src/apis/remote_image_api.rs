/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`download_remote_image`]
#[derive(Clone, Debug)]
pub struct DownloadRemoteImageParams {
    /// Item Id.
    pub item_id: String,
    /// The image type.
    pub r#type: String,
    /// The image url.
    pub image_url: Option<String>
}

/// struct for passing parameters to the method [`get_remote_image_providers`]
#[derive(Clone, Debug)]
pub struct GetRemoteImageProvidersParams {
    /// Item Id.
    pub item_id: String
}

/// struct for passing parameters to the method [`get_remote_images`]
#[derive(Clone, Debug)]
pub struct GetRemoteImagesParams {
    /// Item Id.
    pub item_id: String,
    /// The image type.
    pub r#type: Option<String>,
    /// Optional. The record index to start at. All items with a lower index will be dropped from the results.
    pub start_index: Option<i32>,
    /// Optional. The maximum number of records to return.
    pub limit: Option<i32>,
    /// Optional. The image provider to use.
    pub provider_name: Option<String>,
    /// Optional. Include all languages.
    pub include_all_languages: Option<bool>
}


/// struct for typed successes of method [`download_remote_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DownloadRemoteImageSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_remote_image_providers`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRemoteImageProvidersSuccess {
    Status200(Vec<models::ImageProviderInfo>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_remote_images`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRemoteImagesSuccess {
    Status200(models::RemoteImageResult),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`download_remote_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DownloadRemoteImageError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_remote_image_providers`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRemoteImageProvidersError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_remote_images`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRemoteImagesError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}


pub async fn download_remote_image(configuration: &configuration::Configuration, params: DownloadRemoteImageParams) -> Result<ResponseContent<DownloadRemoteImageSuccess>, Error<DownloadRemoteImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let r#type = params.r#type;
    let image_url = params.image_url;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/RemoteImages/Download", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("type", &r#type.to_string())]);
    if let Some(ref local_var_str) = image_url {
        local_var_req_builder = local_var_req_builder.query(&[("imageUrl", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<DownloadRemoteImageSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<DownloadRemoteImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_remote_image_providers(configuration: &configuration::Configuration, params: GetRemoteImageProvidersParams) -> Result<ResponseContent<GetRemoteImageProvidersSuccess>, Error<GetRemoteImageProvidersError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/RemoteImages/Providers", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetRemoteImageProvidersSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetRemoteImageProvidersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_remote_images(configuration: &configuration::Configuration, params: GetRemoteImagesParams) -> Result<ResponseContent<GetRemoteImagesSuccess>, Error<GetRemoteImagesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let r#type = params.r#type;
    let start_index = params.start_index;
    let limit = params.limit;
    let provider_name = params.provider_name;
    let include_all_languages = params.include_all_languages;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/RemoteImages", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = r#type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_index {
        local_var_req_builder = local_var_req_builder.query(&[("startIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = provider_name {
        local_var_req_builder = local_var_req_builder.query(&[("providerName", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_all_languages {
        local_var_req_builder = local_var_req_builder.query(&[("includeAllLanguages", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetRemoteImagesSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetRemoteImagesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

