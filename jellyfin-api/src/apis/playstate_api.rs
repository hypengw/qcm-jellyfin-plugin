/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`mark_played_item`]
#[derive(Clone, Debug)]
pub struct MarkPlayedItemParams {
    /// Item id.
    pub item_id: String,
    /// User id.
    pub user_id: Option<String>,
    /// Optional. The date the item was played.
    pub date_played: Option<String>
}

/// struct for passing parameters to the method [`mark_unplayed_item`]
#[derive(Clone, Debug)]
pub struct MarkUnplayedItemParams {
    /// Item id.
    pub item_id: String,
    /// User id.
    pub user_id: Option<String>
}

/// struct for passing parameters to the method [`on_playback_progress`]
#[derive(Clone, Debug)]
pub struct OnPlaybackProgressParams {
    /// Item id.
    pub item_id: String,
    /// The id of the MediaSource.
    pub media_source_id: Option<String>,
    /// Optional. The current position, in ticks. 1 tick = 10000 ms.
    pub position_ticks: Option<i64>,
    /// The audio stream index.
    pub audio_stream_index: Option<i32>,
    /// The subtitle stream index.
    pub subtitle_stream_index: Option<i32>,
    /// Scale of 0-100.
    pub volume_level: Option<i32>,
    /// The play method.
    pub play_method: Option<String>,
    /// The live stream id.
    pub live_stream_id: Option<String>,
    /// The play session id.
    pub play_session_id: Option<String>,
    /// The repeat mode.
    pub repeat_mode: Option<String>,
    /// Indicates if the player is paused.
    pub is_paused: Option<bool>,
    /// Indicates if the player is muted.
    pub is_muted: Option<bool>
}

/// struct for passing parameters to the method [`on_playback_start`]
#[derive(Clone, Debug)]
pub struct OnPlaybackStartParams {
    /// Item id.
    pub item_id: String,
    /// The id of the MediaSource.
    pub media_source_id: Option<String>,
    /// The audio stream index.
    pub audio_stream_index: Option<i32>,
    /// The subtitle stream index.
    pub subtitle_stream_index: Option<i32>,
    /// The play method.
    pub play_method: Option<String>,
    /// The live stream id.
    pub live_stream_id: Option<String>,
    /// The play session id.
    pub play_session_id: Option<String>,
    /// Indicates if the client can seek.
    pub can_seek: Option<bool>
}

/// struct for passing parameters to the method [`on_playback_stopped`]
#[derive(Clone, Debug)]
pub struct OnPlaybackStoppedParams {
    /// Item id.
    pub item_id: String,
    /// The id of the MediaSource.
    pub media_source_id: Option<String>,
    /// The next media type that will play.
    pub next_media_type: Option<String>,
    /// Optional. The position, in ticks, where playback stopped. 1 tick = 10000 ms.
    pub position_ticks: Option<i64>,
    /// The live stream id.
    pub live_stream_id: Option<String>,
    /// The play session id.
    pub play_session_id: Option<String>
}

/// struct for passing parameters to the method [`ping_playback_session`]
#[derive(Clone, Debug)]
pub struct PingPlaybackSessionParams {
    /// Playback session id.
    pub play_session_id: String
}

/// struct for passing parameters to the method [`report_playback_progress`]
#[derive(Clone, Debug)]
pub struct ReportPlaybackProgressParams {
    /// The playback progress info.
    pub playback_progress_info: Option<models::PlaybackProgressInfo>
}

/// struct for passing parameters to the method [`report_playback_start`]
#[derive(Clone, Debug)]
pub struct ReportPlaybackStartParams {
    /// The playback start info.
    pub playback_start_info: Option<models::PlaybackStartInfo>
}

/// struct for passing parameters to the method [`report_playback_stopped`]
#[derive(Clone, Debug)]
pub struct ReportPlaybackStoppedParams {
    /// The playback stop info.
    pub playback_stop_info: Option<models::PlaybackStopInfo>
}


/// struct for typed successes of method [`mark_played_item`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MarkPlayedItemSuccess {
    Status200(models::UserItemDataDto),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`mark_unplayed_item`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MarkUnplayedItemSuccess {
    Status200(models::UserItemDataDto),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`on_playback_progress`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OnPlaybackProgressSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`on_playback_start`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OnPlaybackStartSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`on_playback_stopped`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OnPlaybackStoppedSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`ping_playback_session`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PingPlaybackSessionSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`report_playback_progress`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReportPlaybackProgressSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`report_playback_start`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReportPlaybackStartSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`report_playback_stopped`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReportPlaybackStoppedSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mark_played_item`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MarkPlayedItemError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mark_unplayed_item`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MarkUnplayedItemError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`on_playback_progress`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OnPlaybackProgressError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`on_playback_start`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OnPlaybackStartError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`on_playback_stopped`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OnPlaybackStoppedError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ping_playback_session`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PingPlaybackSessionError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`report_playback_progress`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReportPlaybackProgressError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`report_playback_start`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReportPlaybackStartError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`report_playback_stopped`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReportPlaybackStoppedError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}


pub async fn mark_played_item(configuration: &configuration::Configuration, params: MarkPlayedItemParams) -> Result<ResponseContent<MarkPlayedItemSuccess>, Error<MarkPlayedItemError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let user_id = params.user_id;
    let date_played = params.date_played;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/UserPlayedItems/{itemId}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("userId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = date_played {
        local_var_req_builder = local_var_req_builder.query(&[("datePlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<MarkPlayedItemSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<MarkPlayedItemError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn mark_unplayed_item(configuration: &configuration::Configuration, params: MarkUnplayedItemParams) -> Result<ResponseContent<MarkUnplayedItemSuccess>, Error<MarkUnplayedItemError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let user_id = params.user_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/UserPlayedItems/{itemId}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("userId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<MarkUnplayedItemSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<MarkUnplayedItemError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn on_playback_progress(configuration: &configuration::Configuration, params: OnPlaybackProgressParams) -> Result<ResponseContent<OnPlaybackProgressSuccess>, Error<OnPlaybackProgressError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let media_source_id = params.media_source_id;
    let position_ticks = params.position_ticks;
    let audio_stream_index = params.audio_stream_index;
    let subtitle_stream_index = params.subtitle_stream_index;
    let volume_level = params.volume_level;
    let play_method = params.play_method;
    let live_stream_id = params.live_stream_id;
    let play_session_id = params.play_session_id;
    let repeat_mode = params.repeat_mode;
    let is_paused = params.is_paused;
    let is_muted = params.is_muted;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/PlayingItems/{itemId}/Progress", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = media_source_id {
        local_var_req_builder = local_var_req_builder.query(&[("mediaSourceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = position_ticks {
        local_var_req_builder = local_var_req_builder.query(&[("positionTicks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("audioStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = volume_level {
        local_var_req_builder = local_var_req_builder.query(&[("volumeLevel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = play_method {
        local_var_req_builder = local_var_req_builder.query(&[("playMethod", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = live_stream_id {
        local_var_req_builder = local_var_req_builder.query(&[("liveStreamId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = play_session_id {
        local_var_req_builder = local_var_req_builder.query(&[("playSessionId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = repeat_mode {
        local_var_req_builder = local_var_req_builder.query(&[("repeatMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_paused {
        local_var_req_builder = local_var_req_builder.query(&[("isPaused", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_muted {
        local_var_req_builder = local_var_req_builder.query(&[("isMuted", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<OnPlaybackProgressSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<OnPlaybackProgressError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn on_playback_start(configuration: &configuration::Configuration, params: OnPlaybackStartParams) -> Result<ResponseContent<OnPlaybackStartSuccess>, Error<OnPlaybackStartError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let media_source_id = params.media_source_id;
    let audio_stream_index = params.audio_stream_index;
    let subtitle_stream_index = params.subtitle_stream_index;
    let play_method = params.play_method;
    let live_stream_id = params.live_stream_id;
    let play_session_id = params.play_session_id;
    let can_seek = params.can_seek;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/PlayingItems/{itemId}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = media_source_id {
        local_var_req_builder = local_var_req_builder.query(&[("mediaSourceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("audioStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = play_method {
        local_var_req_builder = local_var_req_builder.query(&[("playMethod", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = live_stream_id {
        local_var_req_builder = local_var_req_builder.query(&[("liveStreamId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = play_session_id {
        local_var_req_builder = local_var_req_builder.query(&[("playSessionId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = can_seek {
        local_var_req_builder = local_var_req_builder.query(&[("canSeek", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<OnPlaybackStartSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<OnPlaybackStartError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn on_playback_stopped(configuration: &configuration::Configuration, params: OnPlaybackStoppedParams) -> Result<ResponseContent<OnPlaybackStoppedSuccess>, Error<OnPlaybackStoppedError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let media_source_id = params.media_source_id;
    let next_media_type = params.next_media_type;
    let position_ticks = params.position_ticks;
    let live_stream_id = params.live_stream_id;
    let play_session_id = params.play_session_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/PlayingItems/{itemId}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = media_source_id {
        local_var_req_builder = local_var_req_builder.query(&[("mediaSourceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next_media_type {
        local_var_req_builder = local_var_req_builder.query(&[("nextMediaType", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = position_ticks {
        local_var_req_builder = local_var_req_builder.query(&[("positionTicks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = live_stream_id {
        local_var_req_builder = local_var_req_builder.query(&[("liveStreamId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = play_session_id {
        local_var_req_builder = local_var_req_builder.query(&[("playSessionId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<OnPlaybackStoppedSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<OnPlaybackStoppedError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn ping_playback_session(configuration: &configuration::Configuration, params: PingPlaybackSessionParams) -> Result<ResponseContent<PingPlaybackSessionSuccess>, Error<PingPlaybackSessionError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let play_session_id = params.play_session_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Sessions/Playing/Ping", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("playSessionId", &play_session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<PingPlaybackSessionSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<PingPlaybackSessionError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn report_playback_progress(configuration: &configuration::Configuration, params: ReportPlaybackProgressParams) -> Result<ResponseContent<ReportPlaybackProgressSuccess>, Error<ReportPlaybackProgressError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let playback_progress_info = params.playback_progress_info;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Sessions/Playing/Progress", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&playback_progress_info);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ReportPlaybackProgressSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ReportPlaybackProgressError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn report_playback_start(configuration: &configuration::Configuration, params: ReportPlaybackStartParams) -> Result<ResponseContent<ReportPlaybackStartSuccess>, Error<ReportPlaybackStartError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let playback_start_info = params.playback_start_info;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Sessions/Playing", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&playback_start_info);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ReportPlaybackStartSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ReportPlaybackStartError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn report_playback_stopped(configuration: &configuration::Configuration, params: ReportPlaybackStoppedParams) -> Result<ResponseContent<ReportPlaybackStoppedSuccess>, Error<ReportPlaybackStoppedError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let playback_stop_info = params.playback_stop_info;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Sessions/Playing/Stopped", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&playback_stop_info);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ReportPlaybackStoppedSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ReportPlaybackStoppedError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

