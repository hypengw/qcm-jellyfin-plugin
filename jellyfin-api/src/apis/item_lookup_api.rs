/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`apply_search_criteria`]
#[derive(Clone, Debug)]
pub struct ApplySearchCriteriaParams {
    /// Item id.
    pub item_id: String,
    /// The remote search result.
    pub remote_search_result: models::RemoteSearchResult,
    /// Optional. Whether or not to replace all images. Default: True.
    pub replace_all_images: Option<bool>
}

/// struct for passing parameters to the method [`get_book_remote_search_results`]
#[derive(Clone, Debug)]
pub struct GetBookRemoteSearchResultsParams {
    /// Remote search query.
    pub book_info_remote_search_query: models::BookInfoRemoteSearchQuery
}

/// struct for passing parameters to the method [`get_box_set_remote_search_results`]
#[derive(Clone, Debug)]
pub struct GetBoxSetRemoteSearchResultsParams {
    /// Remote search query.
    pub box_set_info_remote_search_query: models::BoxSetInfoRemoteSearchQuery
}

/// struct for passing parameters to the method [`get_external_id_infos`]
#[derive(Clone, Debug)]
pub struct GetExternalIdInfosParams {
    /// Item id.
    pub item_id: String
}

/// struct for passing parameters to the method [`get_movie_remote_search_results`]
#[derive(Clone, Debug)]
pub struct GetMovieRemoteSearchResultsParams {
    /// Remote search query.
    pub movie_info_remote_search_query: models::MovieInfoRemoteSearchQuery
}

/// struct for passing parameters to the method [`get_music_album_remote_search_results`]
#[derive(Clone, Debug)]
pub struct GetMusicAlbumRemoteSearchResultsParams {
    /// Remote search query.
    pub album_info_remote_search_query: models::AlbumInfoRemoteSearchQuery
}

/// struct for passing parameters to the method [`get_music_artist_remote_search_results`]
#[derive(Clone, Debug)]
pub struct GetMusicArtistRemoteSearchResultsParams {
    /// Remote search query.
    pub artist_info_remote_search_query: models::ArtistInfoRemoteSearchQuery
}

/// struct for passing parameters to the method [`get_music_video_remote_search_results`]
#[derive(Clone, Debug)]
pub struct GetMusicVideoRemoteSearchResultsParams {
    /// Remote search query.
    pub music_video_info_remote_search_query: models::MusicVideoInfoRemoteSearchQuery
}

/// struct for passing parameters to the method [`get_person_remote_search_results`]
#[derive(Clone, Debug)]
pub struct GetPersonRemoteSearchResultsParams {
    /// Remote search query.
    pub person_lookup_info_remote_search_query: models::PersonLookupInfoRemoteSearchQuery
}

/// struct for passing parameters to the method [`get_series_remote_search_results`]
#[derive(Clone, Debug)]
pub struct GetSeriesRemoteSearchResultsParams {
    /// Remote search query.
    pub series_info_remote_search_query: models::SeriesInfoRemoteSearchQuery
}

/// struct for passing parameters to the method [`get_trailer_remote_search_results`]
#[derive(Clone, Debug)]
pub struct GetTrailerRemoteSearchResultsParams {
    /// Remote search query.
    pub trailer_info_remote_search_query: models::TrailerInfoRemoteSearchQuery
}


/// struct for typed successes of method [`apply_search_criteria`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApplySearchCriteriaSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_book_remote_search_results`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBookRemoteSearchResultsSuccess {
    Status200(Vec<models::RemoteSearchResult>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_box_set_remote_search_results`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBoxSetRemoteSearchResultsSuccess {
    Status200(Vec<models::RemoteSearchResult>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_external_id_infos`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetExternalIdInfosSuccess {
    Status200(Vec<models::ExternalIdInfo>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_movie_remote_search_results`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMovieRemoteSearchResultsSuccess {
    Status200(Vec<models::RemoteSearchResult>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_music_album_remote_search_results`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMusicAlbumRemoteSearchResultsSuccess {
    Status200(Vec<models::RemoteSearchResult>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_music_artist_remote_search_results`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMusicArtistRemoteSearchResultsSuccess {
    Status200(Vec<models::RemoteSearchResult>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_music_video_remote_search_results`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMusicVideoRemoteSearchResultsSuccess {
    Status200(Vec<models::RemoteSearchResult>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_person_remote_search_results`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPersonRemoteSearchResultsSuccess {
    Status200(Vec<models::RemoteSearchResult>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_series_remote_search_results`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSeriesRemoteSearchResultsSuccess {
    Status200(Vec<models::RemoteSearchResult>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_trailer_remote_search_results`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTrailerRemoteSearchResultsSuccess {
    Status200(Vec<models::RemoteSearchResult>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`apply_search_criteria`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApplySearchCriteriaError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_book_remote_search_results`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBookRemoteSearchResultsError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_box_set_remote_search_results`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBoxSetRemoteSearchResultsError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_external_id_infos`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetExternalIdInfosError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_movie_remote_search_results`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMovieRemoteSearchResultsError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_music_album_remote_search_results`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMusicAlbumRemoteSearchResultsError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_music_artist_remote_search_results`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMusicArtistRemoteSearchResultsError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_music_video_remote_search_results`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMusicVideoRemoteSearchResultsError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_person_remote_search_results`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPersonRemoteSearchResultsError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_series_remote_search_results`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSeriesRemoteSearchResultsError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_trailer_remote_search_results`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTrailerRemoteSearchResultsError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}


pub async fn apply_search_criteria(configuration: &configuration::Configuration, params: ApplySearchCriteriaParams) -> Result<ResponseContent<ApplySearchCriteriaSuccess>, Error<ApplySearchCriteriaError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let remote_search_result = params.remote_search_result;
    let replace_all_images = params.replace_all_images;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/RemoteSearch/Apply/{itemId}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = replace_all_images {
        local_var_req_builder = local_var_req_builder.query(&[("replaceAllImages", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&remote_search_result);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ApplySearchCriteriaSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ApplySearchCriteriaError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_book_remote_search_results(configuration: &configuration::Configuration, params: GetBookRemoteSearchResultsParams) -> Result<ResponseContent<GetBookRemoteSearchResultsSuccess>, Error<GetBookRemoteSearchResultsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let book_info_remote_search_query = params.book_info_remote_search_query;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/RemoteSearch/Book", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&book_info_remote_search_query);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetBookRemoteSearchResultsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetBookRemoteSearchResultsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_box_set_remote_search_results(configuration: &configuration::Configuration, params: GetBoxSetRemoteSearchResultsParams) -> Result<ResponseContent<GetBoxSetRemoteSearchResultsSuccess>, Error<GetBoxSetRemoteSearchResultsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let box_set_info_remote_search_query = params.box_set_info_remote_search_query;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/RemoteSearch/BoxSet", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&box_set_info_remote_search_query);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetBoxSetRemoteSearchResultsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetBoxSetRemoteSearchResultsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_external_id_infos(configuration: &configuration::Configuration, params: GetExternalIdInfosParams) -> Result<ResponseContent<GetExternalIdInfosSuccess>, Error<GetExternalIdInfosError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/ExternalIdInfos", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetExternalIdInfosSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetExternalIdInfosError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_movie_remote_search_results(configuration: &configuration::Configuration, params: GetMovieRemoteSearchResultsParams) -> Result<ResponseContent<GetMovieRemoteSearchResultsSuccess>, Error<GetMovieRemoteSearchResultsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let movie_info_remote_search_query = params.movie_info_remote_search_query;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/RemoteSearch/Movie", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&movie_info_remote_search_query);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetMovieRemoteSearchResultsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetMovieRemoteSearchResultsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_music_album_remote_search_results(configuration: &configuration::Configuration, params: GetMusicAlbumRemoteSearchResultsParams) -> Result<ResponseContent<GetMusicAlbumRemoteSearchResultsSuccess>, Error<GetMusicAlbumRemoteSearchResultsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let album_info_remote_search_query = params.album_info_remote_search_query;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/RemoteSearch/MusicAlbum", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&album_info_remote_search_query);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetMusicAlbumRemoteSearchResultsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetMusicAlbumRemoteSearchResultsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_music_artist_remote_search_results(configuration: &configuration::Configuration, params: GetMusicArtistRemoteSearchResultsParams) -> Result<ResponseContent<GetMusicArtistRemoteSearchResultsSuccess>, Error<GetMusicArtistRemoteSearchResultsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let artist_info_remote_search_query = params.artist_info_remote_search_query;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/RemoteSearch/MusicArtist", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&artist_info_remote_search_query);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetMusicArtistRemoteSearchResultsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetMusicArtistRemoteSearchResultsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_music_video_remote_search_results(configuration: &configuration::Configuration, params: GetMusicVideoRemoteSearchResultsParams) -> Result<ResponseContent<GetMusicVideoRemoteSearchResultsSuccess>, Error<GetMusicVideoRemoteSearchResultsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let music_video_info_remote_search_query = params.music_video_info_remote_search_query;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/RemoteSearch/MusicVideo", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&music_video_info_remote_search_query);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetMusicVideoRemoteSearchResultsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetMusicVideoRemoteSearchResultsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_person_remote_search_results(configuration: &configuration::Configuration, params: GetPersonRemoteSearchResultsParams) -> Result<ResponseContent<GetPersonRemoteSearchResultsSuccess>, Error<GetPersonRemoteSearchResultsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let person_lookup_info_remote_search_query = params.person_lookup_info_remote_search_query;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/RemoteSearch/Person", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&person_lookup_info_remote_search_query);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetPersonRemoteSearchResultsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetPersonRemoteSearchResultsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_series_remote_search_results(configuration: &configuration::Configuration, params: GetSeriesRemoteSearchResultsParams) -> Result<ResponseContent<GetSeriesRemoteSearchResultsSuccess>, Error<GetSeriesRemoteSearchResultsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let series_info_remote_search_query = params.series_info_remote_search_query;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/RemoteSearch/Series", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&series_info_remote_search_query);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetSeriesRemoteSearchResultsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetSeriesRemoteSearchResultsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_trailer_remote_search_results(configuration: &configuration::Configuration, params: GetTrailerRemoteSearchResultsParams) -> Result<ResponseContent<GetTrailerRemoteSearchResultsSuccess>, Error<GetTrailerRemoteSearchResultsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let trailer_info_remote_search_query = params.trailer_info_remote_search_query;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/RemoteSearch/Trailer", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&trailer_info_remote_search_query);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetTrailerRemoteSearchResultsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetTrailerRemoteSearchResultsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

