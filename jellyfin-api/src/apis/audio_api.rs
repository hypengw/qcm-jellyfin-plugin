/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`get_audio_stream`]
#[derive(Clone, Debug)]
pub struct GetAudioStreamParams {
    /// The item id.
    pub item_id: String,
    /// The audio container.
    pub container: Option<String>,
    /// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
    pub r#static: Option<bool>,
    /// The streaming parameters.
    pub params: Option<String>,
    /// The tag.
    pub tag: Option<String>,
    /// Optional. The dlna device profile id to utilize.
    pub device_profile_id: Option<String>,
    /// The play session id.
    pub play_session_id: Option<String>,
    /// The segment container.
    pub segment_container: Option<String>,
    /// The segment length.
    pub segment_length: Option<i32>,
    /// The minimum number of segments.
    pub min_segments: Option<i32>,
    /// The media version id, if playing an alternate version.
    pub media_source_id: Option<String>,
    /// The device id of the client requesting. Used to stop encoding processes when needed.
    pub device_id: Option<String>,
    /// Optional. Specify an audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension.
    pub audio_codec: Option<String>,
    /// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
    pub enable_auto_stream_copy: Option<bool>,
    /// Whether or not to allow copying of the video stream url.
    pub allow_video_stream_copy: Option<bool>,
    /// Whether or not to allow copying of the audio stream url.
    pub allow_audio_stream_copy: Option<bool>,
    /// Optional. Whether to break on non key frames.
    pub break_on_non_key_frames: Option<bool>,
    /// Optional. Specify a specific audio sample rate, e.g. 44100.
    pub audio_sample_rate: Option<i32>,
    /// Optional. The maximum audio bit depth.
    pub max_audio_bit_depth: Option<i32>,
    /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
    pub audio_bit_rate: Option<i32>,
    /// Optional. Specify a specific number of audio channels to encode to, e.g. 2.
    pub audio_channels: Option<i32>,
    /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
    pub max_audio_channels: Option<i32>,
    /// Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
    pub profile: Option<String>,
    /// Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
    pub level: Option<String>,
    /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
    pub framerate: Option<f32>,
    /// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
    pub max_framerate: Option<f32>,
    /// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
    pub copy_timestamps: Option<bool>,
    /// Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.
    pub start_time_ticks: Option<i64>,
    /// Optional. The fixed horizontal resolution of the encoded video.
    pub width: Option<i32>,
    /// Optional. The fixed vertical resolution of the encoded video.
    pub height: Option<i32>,
    /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
    pub video_bit_rate: Option<i32>,
    /// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
    pub subtitle_stream_index: Option<i32>,
    /// Optional. Specify the subtitle delivery method.
    pub subtitle_method: Option<String>,
    /// Optional.
    pub max_ref_frames: Option<i32>,
    /// Optional. The maximum video bit depth.
    pub max_video_bit_depth: Option<i32>,
    /// Optional. Whether to require avc.
    pub require_avc: Option<bool>,
    /// Optional. Whether to deinterlace the video.
    pub de_interlace: Option<bool>,
    /// Optional. Whether to require a non anamorphic stream.
    pub require_non_anamorphic: Option<bool>,
    /// Optional. The maximum number of audio channels to transcode.
    pub transcoding_max_audio_channels: Option<i32>,
    /// Optional. The limit of how many cpu cores to use.
    pub cpu_core_limit: Option<i32>,
    /// The live stream id.
    pub live_stream_id: Option<String>,
    /// Optional. Whether to enable the MpegtsM2Ts mode.
    pub enable_mpegts_m2_ts_mode: Option<bool>,
    /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension.
    pub video_codec: Option<String>,
    /// Optional. Specify a subtitle codec to encode to.
    pub subtitle_codec: Option<String>,
    /// Optional. The transcoding reason.
    pub transcode_reasons: Option<String>,
    /// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
    pub audio_stream_index: Option<i32>,
    /// Optional. The index of the video stream to use. If omitted the first video stream will be used.
    pub video_stream_index: Option<i32>,
    /// Optional. The MediaBrowser.Model.Dlna.EncodingContext.
    pub context: Option<String>,
    /// Optional. The streaming options.
    pub stream_options: Option<std::collections::HashMap<String, String>>,
    /// Optional. Whether to enable Audio Encoding.
    pub enable_audio_vbr_encoding: Option<bool>
}

/// struct for passing parameters to the method [`get_audio_stream_by_container`]
#[derive(Clone, Debug)]
pub struct GetAudioStreamByContainerParams {
    /// The item id.
    pub item_id: String,
    /// The audio container.
    pub container: String,
    /// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
    pub r#static: Option<bool>,
    /// The streaming parameters.
    pub params: Option<String>,
    /// The tag.
    pub tag: Option<String>,
    /// Optional. The dlna device profile id to utilize.
    pub device_profile_id: Option<String>,
    /// The play session id.
    pub play_session_id: Option<String>,
    /// The segment container.
    pub segment_container: Option<String>,
    /// The segment length.
    pub segment_length: Option<i32>,
    /// The minimum number of segments.
    pub min_segments: Option<i32>,
    /// The media version id, if playing an alternate version.
    pub media_source_id: Option<String>,
    /// The device id of the client requesting. Used to stop encoding processes when needed.
    pub device_id: Option<String>,
    /// Optional. Specify an audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension.
    pub audio_codec: Option<String>,
    /// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
    pub enable_auto_stream_copy: Option<bool>,
    /// Whether or not to allow copying of the video stream url.
    pub allow_video_stream_copy: Option<bool>,
    /// Whether or not to allow copying of the audio stream url.
    pub allow_audio_stream_copy: Option<bool>,
    /// Optional. Whether to break on non key frames.
    pub break_on_non_key_frames: Option<bool>,
    /// Optional. Specify a specific audio sample rate, e.g. 44100.
    pub audio_sample_rate: Option<i32>,
    /// Optional. The maximum audio bit depth.
    pub max_audio_bit_depth: Option<i32>,
    /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
    pub audio_bit_rate: Option<i32>,
    /// Optional. Specify a specific number of audio channels to encode to, e.g. 2.
    pub audio_channels: Option<i32>,
    /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
    pub max_audio_channels: Option<i32>,
    /// Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
    pub profile: Option<String>,
    /// Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
    pub level: Option<String>,
    /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
    pub framerate: Option<f32>,
    /// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
    pub max_framerate: Option<f32>,
    /// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
    pub copy_timestamps: Option<bool>,
    /// Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.
    pub start_time_ticks: Option<i64>,
    /// Optional. The fixed horizontal resolution of the encoded video.
    pub width: Option<i32>,
    /// Optional. The fixed vertical resolution of the encoded video.
    pub height: Option<i32>,
    /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
    pub video_bit_rate: Option<i32>,
    /// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
    pub subtitle_stream_index: Option<i32>,
    /// Optional. Specify the subtitle delivery method.
    pub subtitle_method: Option<String>,
    /// Optional.
    pub max_ref_frames: Option<i32>,
    /// Optional. The maximum video bit depth.
    pub max_video_bit_depth: Option<i32>,
    /// Optional. Whether to require avc.
    pub require_avc: Option<bool>,
    /// Optional. Whether to deinterlace the video.
    pub de_interlace: Option<bool>,
    /// Optional. Whether to require a non anamporphic stream.
    pub require_non_anamorphic: Option<bool>,
    /// Optional. The maximum number of audio channels to transcode.
    pub transcoding_max_audio_channels: Option<i32>,
    /// Optional. The limit of how many cpu cores to use.
    pub cpu_core_limit: Option<i32>,
    /// The live stream id.
    pub live_stream_id: Option<String>,
    /// Optional. Whether to enable the MpegtsM2Ts mode.
    pub enable_mpegts_m2_ts_mode: Option<bool>,
    /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension.
    pub video_codec: Option<String>,
    /// Optional. Specify a subtitle codec to encode to.
    pub subtitle_codec: Option<String>,
    /// Optional. The transcoding reason.
    pub transcode_reasons: Option<String>,
    /// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
    pub audio_stream_index: Option<i32>,
    /// Optional. The index of the video stream to use. If omitted the first video stream will be used.
    pub video_stream_index: Option<i32>,
    /// Optional. The MediaBrowser.Model.Dlna.EncodingContext.
    pub context: Option<String>,
    /// Optional. The streaming options.
    pub stream_options: Option<std::collections::HashMap<String, String>>,
    /// Optional. Whether to enable Audio Encoding.
    pub enable_audio_vbr_encoding: Option<bool>
}

/// struct for passing parameters to the method [`head_audio_stream`]
#[derive(Clone, Debug)]
pub struct HeadAudioStreamParams {
    /// The item id.
    pub item_id: String,
    /// The audio container.
    pub container: Option<String>,
    /// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
    pub r#static: Option<bool>,
    /// The streaming parameters.
    pub params: Option<String>,
    /// The tag.
    pub tag: Option<String>,
    /// Optional. The dlna device profile id to utilize.
    pub device_profile_id: Option<String>,
    /// The play session id.
    pub play_session_id: Option<String>,
    /// The segment container.
    pub segment_container: Option<String>,
    /// The segment length.
    pub segment_length: Option<i32>,
    /// The minimum number of segments.
    pub min_segments: Option<i32>,
    /// The media version id, if playing an alternate version.
    pub media_source_id: Option<String>,
    /// The device id of the client requesting. Used to stop encoding processes when needed.
    pub device_id: Option<String>,
    /// Optional. Specify an audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension.
    pub audio_codec: Option<String>,
    /// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
    pub enable_auto_stream_copy: Option<bool>,
    /// Whether or not to allow copying of the video stream url.
    pub allow_video_stream_copy: Option<bool>,
    /// Whether or not to allow copying of the audio stream url.
    pub allow_audio_stream_copy: Option<bool>,
    /// Optional. Whether to break on non key frames.
    pub break_on_non_key_frames: Option<bool>,
    /// Optional. Specify a specific audio sample rate, e.g. 44100.
    pub audio_sample_rate: Option<i32>,
    /// Optional. The maximum audio bit depth.
    pub max_audio_bit_depth: Option<i32>,
    /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
    pub audio_bit_rate: Option<i32>,
    /// Optional. Specify a specific number of audio channels to encode to, e.g. 2.
    pub audio_channels: Option<i32>,
    /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
    pub max_audio_channels: Option<i32>,
    /// Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
    pub profile: Option<String>,
    /// Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
    pub level: Option<String>,
    /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
    pub framerate: Option<f32>,
    /// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
    pub max_framerate: Option<f32>,
    /// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
    pub copy_timestamps: Option<bool>,
    /// Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.
    pub start_time_ticks: Option<i64>,
    /// Optional. The fixed horizontal resolution of the encoded video.
    pub width: Option<i32>,
    /// Optional. The fixed vertical resolution of the encoded video.
    pub height: Option<i32>,
    /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
    pub video_bit_rate: Option<i32>,
    /// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
    pub subtitle_stream_index: Option<i32>,
    /// Optional. Specify the subtitle delivery method.
    pub subtitle_method: Option<String>,
    /// Optional.
    pub max_ref_frames: Option<i32>,
    /// Optional. The maximum video bit depth.
    pub max_video_bit_depth: Option<i32>,
    /// Optional. Whether to require avc.
    pub require_avc: Option<bool>,
    /// Optional. Whether to deinterlace the video.
    pub de_interlace: Option<bool>,
    /// Optional. Whether to require a non anamorphic stream.
    pub require_non_anamorphic: Option<bool>,
    /// Optional. The maximum number of audio channels to transcode.
    pub transcoding_max_audio_channels: Option<i32>,
    /// Optional. The limit of how many cpu cores to use.
    pub cpu_core_limit: Option<i32>,
    /// The live stream id.
    pub live_stream_id: Option<String>,
    /// Optional. Whether to enable the MpegtsM2Ts mode.
    pub enable_mpegts_m2_ts_mode: Option<bool>,
    /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension.
    pub video_codec: Option<String>,
    /// Optional. Specify a subtitle codec to encode to.
    pub subtitle_codec: Option<String>,
    /// Optional. The transcoding reason.
    pub transcode_reasons: Option<String>,
    /// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
    pub audio_stream_index: Option<i32>,
    /// Optional. The index of the video stream to use. If omitted the first video stream will be used.
    pub video_stream_index: Option<i32>,
    /// Optional. The MediaBrowser.Model.Dlna.EncodingContext.
    pub context: Option<String>,
    /// Optional. The streaming options.
    pub stream_options: Option<std::collections::HashMap<String, String>>,
    /// Optional. Whether to enable Audio Encoding.
    pub enable_audio_vbr_encoding: Option<bool>
}

/// struct for passing parameters to the method [`head_audio_stream_by_container`]
#[derive(Clone, Debug)]
pub struct HeadAudioStreamByContainerParams {
    /// The item id.
    pub item_id: String,
    /// The audio container.
    pub container: String,
    /// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
    pub r#static: Option<bool>,
    /// The streaming parameters.
    pub params: Option<String>,
    /// The tag.
    pub tag: Option<String>,
    /// Optional. The dlna device profile id to utilize.
    pub device_profile_id: Option<String>,
    /// The play session id.
    pub play_session_id: Option<String>,
    /// The segment container.
    pub segment_container: Option<String>,
    /// The segment length.
    pub segment_length: Option<i32>,
    /// The minimum number of segments.
    pub min_segments: Option<i32>,
    /// The media version id, if playing an alternate version.
    pub media_source_id: Option<String>,
    /// The device id of the client requesting. Used to stop encoding processes when needed.
    pub device_id: Option<String>,
    /// Optional. Specify an audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension.
    pub audio_codec: Option<String>,
    /// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
    pub enable_auto_stream_copy: Option<bool>,
    /// Whether or not to allow copying of the video stream url.
    pub allow_video_stream_copy: Option<bool>,
    /// Whether or not to allow copying of the audio stream url.
    pub allow_audio_stream_copy: Option<bool>,
    /// Optional. Whether to break on non key frames.
    pub break_on_non_key_frames: Option<bool>,
    /// Optional. Specify a specific audio sample rate, e.g. 44100.
    pub audio_sample_rate: Option<i32>,
    /// Optional. The maximum audio bit depth.
    pub max_audio_bit_depth: Option<i32>,
    /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
    pub audio_bit_rate: Option<i32>,
    /// Optional. Specify a specific number of audio channels to encode to, e.g. 2.
    pub audio_channels: Option<i32>,
    /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
    pub max_audio_channels: Option<i32>,
    /// Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
    pub profile: Option<String>,
    /// Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
    pub level: Option<String>,
    /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
    pub framerate: Option<f32>,
    /// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
    pub max_framerate: Option<f32>,
    /// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
    pub copy_timestamps: Option<bool>,
    /// Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.
    pub start_time_ticks: Option<i64>,
    /// Optional. The fixed horizontal resolution of the encoded video.
    pub width: Option<i32>,
    /// Optional. The fixed vertical resolution of the encoded video.
    pub height: Option<i32>,
    /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
    pub video_bit_rate: Option<i32>,
    /// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
    pub subtitle_stream_index: Option<i32>,
    /// Optional. Specify the subtitle delivery method.
    pub subtitle_method: Option<String>,
    /// Optional.
    pub max_ref_frames: Option<i32>,
    /// Optional. The maximum video bit depth.
    pub max_video_bit_depth: Option<i32>,
    /// Optional. Whether to require avc.
    pub require_avc: Option<bool>,
    /// Optional. Whether to deinterlace the video.
    pub de_interlace: Option<bool>,
    /// Optional. Whether to require a non anamporphic stream.
    pub require_non_anamorphic: Option<bool>,
    /// Optional. The maximum number of audio channels to transcode.
    pub transcoding_max_audio_channels: Option<i32>,
    /// Optional. The limit of how many cpu cores to use.
    pub cpu_core_limit: Option<i32>,
    /// The live stream id.
    pub live_stream_id: Option<String>,
    /// Optional. Whether to enable the MpegtsM2Ts mode.
    pub enable_mpegts_m2_ts_mode: Option<bool>,
    /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension.
    pub video_codec: Option<String>,
    /// Optional. Specify a subtitle codec to encode to.
    pub subtitle_codec: Option<String>,
    /// Optional. The transcoding reason.
    pub transcode_reasons: Option<String>,
    /// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
    pub audio_stream_index: Option<i32>,
    /// Optional. The index of the video stream to use. If omitted the first video stream will be used.
    pub video_stream_index: Option<i32>,
    /// Optional. The MediaBrowser.Model.Dlna.EncodingContext.
    pub context: Option<String>,
    /// Optional. The streaming options.
    pub stream_options: Option<std::collections::HashMap<String, String>>,
    /// Optional. Whether to enable Audio Encoding.
    pub enable_audio_vbr_encoding: Option<bool>
}


/// struct for typed successes of method [`get_audio_stream`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAudioStreamSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_audio_stream_by_container`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAudioStreamByContainerSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`head_audio_stream`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadAudioStreamSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`head_audio_stream_by_container`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadAudioStreamByContainerSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_audio_stream`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAudioStreamError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_audio_stream_by_container`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAudioStreamByContainerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_audio_stream`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadAudioStreamError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_audio_stream_by_container`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadAudioStreamByContainerError {
    UnknownValue(serde_json::Value),
}


pub async fn get_audio_stream(configuration: &configuration::Configuration, params: GetAudioStreamParams) -> Result<ResponseContent<GetAudioStreamSuccess>, Error<GetAudioStreamError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let container = params.container;
    let r#static = params.r#static;
    let params_ = params.params;
    let tag = params.tag;
    let device_profile_id = params.device_profile_id;
    let play_session_id = params.play_session_id;
    let segment_container = params.segment_container;
    let segment_length = params.segment_length;
    let min_segments = params.min_segments;
    let media_source_id = params.media_source_id;
    let device_id = params.device_id;
    let audio_codec = params.audio_codec;
    let enable_auto_stream_copy = params.enable_auto_stream_copy;
    let allow_video_stream_copy = params.allow_video_stream_copy;
    let allow_audio_stream_copy = params.allow_audio_stream_copy;
    let break_on_non_key_frames = params.break_on_non_key_frames;
    let audio_sample_rate = params.audio_sample_rate;
    let max_audio_bit_depth = params.max_audio_bit_depth;
    let audio_bit_rate = params.audio_bit_rate;
    let audio_channels = params.audio_channels;
    let max_audio_channels = params.max_audio_channels;
    let profile = params.profile;
    let level = params.level;
    let framerate = params.framerate;
    let max_framerate = params.max_framerate;
    let copy_timestamps = params.copy_timestamps;
    let start_time_ticks = params.start_time_ticks;
    let width = params.width;
    let height = params.height;
    let video_bit_rate = params.video_bit_rate;
    let subtitle_stream_index = params.subtitle_stream_index;
    let subtitle_method = params.subtitle_method;
    let max_ref_frames = params.max_ref_frames;
    let max_video_bit_depth = params.max_video_bit_depth;
    let require_avc = params.require_avc;
    let de_interlace = params.de_interlace;
    let require_non_anamorphic = params.require_non_anamorphic;
    let transcoding_max_audio_channels = params.transcoding_max_audio_channels;
    let cpu_core_limit = params.cpu_core_limit;
    let live_stream_id = params.live_stream_id;
    let enable_mpegts_m2_ts_mode = params.enable_mpegts_m2_ts_mode;
    let video_codec = params.video_codec;
    let subtitle_codec = params.subtitle_codec;
    let transcode_reasons = params.transcode_reasons;
    let audio_stream_index = params.audio_stream_index;
    let video_stream_index = params.video_stream_index;
    let context = params.context;
    let stream_options = params.stream_options;
    let enable_audio_vbr_encoding = params.enable_audio_vbr_encoding;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Audio/{itemId}/stream", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = container {
        local_var_req_builder = local_var_req_builder.query(&[("container", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#static {
        local_var_req_builder = local_var_req_builder.query(&[("static", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = params_ {
        local_var_req_builder = local_var_req_builder.query(&[("params", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_profile_id {
        local_var_req_builder = local_var_req_builder.query(&[("deviceProfileId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = play_session_id {
        local_var_req_builder = local_var_req_builder.query(&[("playSessionId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = segment_container {
        local_var_req_builder = local_var_req_builder.query(&[("segmentContainer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = segment_length {
        local_var_req_builder = local_var_req_builder.query(&[("segmentLength", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = min_segments {
        local_var_req_builder = local_var_req_builder.query(&[("minSegments", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = media_source_id {
        local_var_req_builder = local_var_req_builder.query(&[("mediaSourceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("deviceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_codec {
        local_var_req_builder = local_var_req_builder.query(&[("audioCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_auto_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("enableAutoStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allow_video_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("allowVideoStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allow_audio_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("allowAudioStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = break_on_non_key_frames {
        local_var_req_builder = local_var_req_builder.query(&[("breakOnNonKeyFrames", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_sample_rate {
        local_var_req_builder = local_var_req_builder.query(&[("audioSampleRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_bit_depth {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioBitDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_bit_rate {
        local_var_req_builder = local_var_req_builder.query(&[("audioBitRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("audioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = profile {
        local_var_req_builder = local_var_req_builder.query(&[("profile", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = level {
        local_var_req_builder = local_var_req_builder.query(&[("level", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = framerate {
        local_var_req_builder = local_var_req_builder.query(&[("framerate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_framerate {
        local_var_req_builder = local_var_req_builder.query(&[("maxFramerate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = copy_timestamps {
        local_var_req_builder = local_var_req_builder.query(&[("copyTimestamps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_time_ticks {
        local_var_req_builder = local_var_req_builder.query(&[("startTimeTicks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_bit_rate {
        local_var_req_builder = local_var_req_builder.query(&[("videoBitRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_method {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleMethod", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_ref_frames {
        local_var_req_builder = local_var_req_builder.query(&[("maxRefFrames", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_video_bit_depth {
        local_var_req_builder = local_var_req_builder.query(&[("maxVideoBitDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = require_avc {
        local_var_req_builder = local_var_req_builder.query(&[("requireAvc", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = de_interlace {
        local_var_req_builder = local_var_req_builder.query(&[("deInterlace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = require_non_anamorphic {
        local_var_req_builder = local_var_req_builder.query(&[("requireNonAnamorphic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcoding_max_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("transcodingMaxAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cpu_core_limit {
        local_var_req_builder = local_var_req_builder.query(&[("cpuCoreLimit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = live_stream_id {
        local_var_req_builder = local_var_req_builder.query(&[("liveStreamId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_mpegts_m2_ts_mode {
        local_var_req_builder = local_var_req_builder.query(&[("enableMpegtsM2TsMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_codec {
        local_var_req_builder = local_var_req_builder.query(&[("videoCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_codec {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcode_reasons {
        local_var_req_builder = local_var_req_builder.query(&[("transcodeReasons", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("audioStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("videoStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = context {
        local_var_req_builder = local_var_req_builder.query(&[("context", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stream_options {
        local_var_req_builder = local_var_req_builder.query(&[("streamOptions", serde_json::to_string(&local_var_str).unwrap())]);
    }
    if let Some(ref local_var_str) = enable_audio_vbr_encoding {
        local_var_req_builder = local_var_req_builder.query(&[("enableAudioVbrEncoding", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetAudioStreamSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetAudioStreamError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_audio_stream_by_container(configuration: &configuration::Configuration, params: GetAudioStreamByContainerParams) -> Result<ResponseContent<GetAudioStreamByContainerSuccess>, Error<GetAudioStreamByContainerError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let container = params.container;
    let r#static = params.r#static;
    let params_ = params.params;
    let tag = params.tag;
    let device_profile_id = params.device_profile_id;
    let play_session_id = params.play_session_id;
    let segment_container = params.segment_container;
    let segment_length = params.segment_length;
    let min_segments = params.min_segments;
    let media_source_id = params.media_source_id;
    let device_id = params.device_id;
    let audio_codec = params.audio_codec;
    let enable_auto_stream_copy = params.enable_auto_stream_copy;
    let allow_video_stream_copy = params.allow_video_stream_copy;
    let allow_audio_stream_copy = params.allow_audio_stream_copy;
    let break_on_non_key_frames = params.break_on_non_key_frames;
    let audio_sample_rate = params.audio_sample_rate;
    let max_audio_bit_depth = params.max_audio_bit_depth;
    let audio_bit_rate = params.audio_bit_rate;
    let audio_channels = params.audio_channels;
    let max_audio_channels = params.max_audio_channels;
    let profile = params.profile;
    let level = params.level;
    let framerate = params.framerate;
    let max_framerate = params.max_framerate;
    let copy_timestamps = params.copy_timestamps;
    let start_time_ticks = params.start_time_ticks;
    let width = params.width;
    let height = params.height;
    let video_bit_rate = params.video_bit_rate;
    let subtitle_stream_index = params.subtitle_stream_index;
    let subtitle_method = params.subtitle_method;
    let max_ref_frames = params.max_ref_frames;
    let max_video_bit_depth = params.max_video_bit_depth;
    let require_avc = params.require_avc;
    let de_interlace = params.de_interlace;
    let require_non_anamorphic = params.require_non_anamorphic;
    let transcoding_max_audio_channels = params.transcoding_max_audio_channels;
    let cpu_core_limit = params.cpu_core_limit;
    let live_stream_id = params.live_stream_id;
    let enable_mpegts_m2_ts_mode = params.enable_mpegts_m2_ts_mode;
    let video_codec = params.video_codec;
    let subtitle_codec = params.subtitle_codec;
    let transcode_reasons = params.transcode_reasons;
    let audio_stream_index = params.audio_stream_index;
    let video_stream_index = params.video_stream_index;
    let context = params.context;
    let stream_options = params.stream_options;
    let enable_audio_vbr_encoding = params.enable_audio_vbr_encoding;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Audio/{itemId}/stream.{container}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), container=crate::apis::urlencode(container));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = r#static {
        local_var_req_builder = local_var_req_builder.query(&[("static", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = params_ {
        local_var_req_builder = local_var_req_builder.query(&[("params",serde_json::to_string(&local_var_str).unwrap())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_profile_id {
        local_var_req_builder = local_var_req_builder.query(&[("deviceProfileId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = play_session_id {
        local_var_req_builder = local_var_req_builder.query(&[("playSessionId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = segment_container {
        local_var_req_builder = local_var_req_builder.query(&[("segmentContainer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = segment_length {
        local_var_req_builder = local_var_req_builder.query(&[("segmentLength", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = min_segments {
        local_var_req_builder = local_var_req_builder.query(&[("minSegments", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = media_source_id {
        local_var_req_builder = local_var_req_builder.query(&[("mediaSourceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("deviceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_codec {
        local_var_req_builder = local_var_req_builder.query(&[("audioCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_auto_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("enableAutoStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allow_video_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("allowVideoStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allow_audio_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("allowAudioStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = break_on_non_key_frames {
        local_var_req_builder = local_var_req_builder.query(&[("breakOnNonKeyFrames", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_sample_rate {
        local_var_req_builder = local_var_req_builder.query(&[("audioSampleRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_bit_depth {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioBitDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_bit_rate {
        local_var_req_builder = local_var_req_builder.query(&[("audioBitRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("audioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = profile {
        local_var_req_builder = local_var_req_builder.query(&[("profile", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = level {
        local_var_req_builder = local_var_req_builder.query(&[("level", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = framerate {
        local_var_req_builder = local_var_req_builder.query(&[("framerate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_framerate {
        local_var_req_builder = local_var_req_builder.query(&[("maxFramerate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = copy_timestamps {
        local_var_req_builder = local_var_req_builder.query(&[("copyTimestamps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_time_ticks {
        local_var_req_builder = local_var_req_builder.query(&[("startTimeTicks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_bit_rate {
        local_var_req_builder = local_var_req_builder.query(&[("videoBitRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_method {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleMethod", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_ref_frames {
        local_var_req_builder = local_var_req_builder.query(&[("maxRefFrames", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_video_bit_depth {
        local_var_req_builder = local_var_req_builder.query(&[("maxVideoBitDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = require_avc {
        local_var_req_builder = local_var_req_builder.query(&[("requireAvc", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = de_interlace {
        local_var_req_builder = local_var_req_builder.query(&[("deInterlace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = require_non_anamorphic {
        local_var_req_builder = local_var_req_builder.query(&[("requireNonAnamorphic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcoding_max_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("transcodingMaxAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cpu_core_limit {
        local_var_req_builder = local_var_req_builder.query(&[("cpuCoreLimit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = live_stream_id {
        local_var_req_builder = local_var_req_builder.query(&[("liveStreamId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_mpegts_m2_ts_mode {
        local_var_req_builder = local_var_req_builder.query(&[("enableMpegtsM2TsMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_codec {
        local_var_req_builder = local_var_req_builder.query(&[("videoCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_codec {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcode_reasons {
        local_var_req_builder = local_var_req_builder.query(&[("transcodeReasons", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("audioStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("videoStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = context {
        local_var_req_builder = local_var_req_builder.query(&[("context", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stream_options {
        local_var_req_builder = local_var_req_builder.query(&[("streamOptions", serde_json::to_string(&local_var_str).unwrap())]);
    }
    if let Some(ref local_var_str) = enable_audio_vbr_encoding {
        local_var_req_builder = local_var_req_builder.query(&[("enableAudioVbrEncoding", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetAudioStreamByContainerSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetAudioStreamByContainerError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_audio_stream(configuration: &configuration::Configuration, params: HeadAudioStreamParams) -> Result<ResponseContent<HeadAudioStreamSuccess>, Error<HeadAudioStreamError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let container = params.container;
    let r#static = params.r#static;
    let params_ = params.params;
    let tag = params.tag;
    let device_profile_id = params.device_profile_id;
    let play_session_id = params.play_session_id;
    let segment_container = params.segment_container;
    let segment_length = params.segment_length;
    let min_segments = params.min_segments;
    let media_source_id = params.media_source_id;
    let device_id = params.device_id;
    let audio_codec = params.audio_codec;
    let enable_auto_stream_copy = params.enable_auto_stream_copy;
    let allow_video_stream_copy = params.allow_video_stream_copy;
    let allow_audio_stream_copy = params.allow_audio_stream_copy;
    let break_on_non_key_frames = params.break_on_non_key_frames;
    let audio_sample_rate = params.audio_sample_rate;
    let max_audio_bit_depth = params.max_audio_bit_depth;
    let audio_bit_rate = params.audio_bit_rate;
    let audio_channels = params.audio_channels;
    let max_audio_channels = params.max_audio_channels;
    let profile = params.profile;
    let level = params.level;
    let framerate = params.framerate;
    let max_framerate = params.max_framerate;
    let copy_timestamps = params.copy_timestamps;
    let start_time_ticks = params.start_time_ticks;
    let width = params.width;
    let height = params.height;
    let video_bit_rate = params.video_bit_rate;
    let subtitle_stream_index = params.subtitle_stream_index;
    let subtitle_method = params.subtitle_method;
    let max_ref_frames = params.max_ref_frames;
    let max_video_bit_depth = params.max_video_bit_depth;
    let require_avc = params.require_avc;
    let de_interlace = params.de_interlace;
    let require_non_anamorphic = params.require_non_anamorphic;
    let transcoding_max_audio_channels = params.transcoding_max_audio_channels;
    let cpu_core_limit = params.cpu_core_limit;
    let live_stream_id = params.live_stream_id;
    let enable_mpegts_m2_ts_mode = params.enable_mpegts_m2_ts_mode;
    let video_codec = params.video_codec;
    let subtitle_codec = params.subtitle_codec;
    let transcode_reasons = params.transcode_reasons;
    let audio_stream_index = params.audio_stream_index;
    let video_stream_index = params.video_stream_index;
    let context = params.context;
    let stream_options = params.stream_options;
    let enable_audio_vbr_encoding = params.enable_audio_vbr_encoding;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Audio/{itemId}/stream", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = container {
        local_var_req_builder = local_var_req_builder.query(&[("container", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#static {
        local_var_req_builder = local_var_req_builder.query(&[("static", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = params_ {
        local_var_req_builder = local_var_req_builder.query(&[("params",serde_json::to_string(&local_var_str).unwrap())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_profile_id {
        local_var_req_builder = local_var_req_builder.query(&[("deviceProfileId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = play_session_id {
        local_var_req_builder = local_var_req_builder.query(&[("playSessionId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = segment_container {
        local_var_req_builder = local_var_req_builder.query(&[("segmentContainer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = segment_length {
        local_var_req_builder = local_var_req_builder.query(&[("segmentLength", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = min_segments {
        local_var_req_builder = local_var_req_builder.query(&[("minSegments", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = media_source_id {
        local_var_req_builder = local_var_req_builder.query(&[("mediaSourceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("deviceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_codec {
        local_var_req_builder = local_var_req_builder.query(&[("audioCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_auto_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("enableAutoStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allow_video_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("allowVideoStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allow_audio_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("allowAudioStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = break_on_non_key_frames {
        local_var_req_builder = local_var_req_builder.query(&[("breakOnNonKeyFrames", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_sample_rate {
        local_var_req_builder = local_var_req_builder.query(&[("audioSampleRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_bit_depth {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioBitDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_bit_rate {
        local_var_req_builder = local_var_req_builder.query(&[("audioBitRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("audioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = profile {
        local_var_req_builder = local_var_req_builder.query(&[("profile", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = level {
        local_var_req_builder = local_var_req_builder.query(&[("level", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = framerate {
        local_var_req_builder = local_var_req_builder.query(&[("framerate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_framerate {
        local_var_req_builder = local_var_req_builder.query(&[("maxFramerate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = copy_timestamps {
        local_var_req_builder = local_var_req_builder.query(&[("copyTimestamps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_time_ticks {
        local_var_req_builder = local_var_req_builder.query(&[("startTimeTicks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_bit_rate {
        local_var_req_builder = local_var_req_builder.query(&[("videoBitRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_method {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleMethod", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_ref_frames {
        local_var_req_builder = local_var_req_builder.query(&[("maxRefFrames", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_video_bit_depth {
        local_var_req_builder = local_var_req_builder.query(&[("maxVideoBitDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = require_avc {
        local_var_req_builder = local_var_req_builder.query(&[("requireAvc", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = de_interlace {
        local_var_req_builder = local_var_req_builder.query(&[("deInterlace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = require_non_anamorphic {
        local_var_req_builder = local_var_req_builder.query(&[("requireNonAnamorphic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcoding_max_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("transcodingMaxAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cpu_core_limit {
        local_var_req_builder = local_var_req_builder.query(&[("cpuCoreLimit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = live_stream_id {
        local_var_req_builder = local_var_req_builder.query(&[("liveStreamId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_mpegts_m2_ts_mode {
        local_var_req_builder = local_var_req_builder.query(&[("enableMpegtsM2TsMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_codec {
        local_var_req_builder = local_var_req_builder.query(&[("videoCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_codec {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcode_reasons {
        local_var_req_builder = local_var_req_builder.query(&[("transcodeReasons", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("audioStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("videoStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = context {
        local_var_req_builder = local_var_req_builder.query(&[("context", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stream_options {
        local_var_req_builder = local_var_req_builder.query(&[("streamOptions", serde_json::to_string(&local_var_str).unwrap())]);
    }
    if let Some(ref local_var_str) = enable_audio_vbr_encoding {
        local_var_req_builder = local_var_req_builder.query(&[("enableAudioVbrEncoding", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<HeadAudioStreamSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<HeadAudioStreamError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_audio_stream_by_container(configuration: &configuration::Configuration, params: HeadAudioStreamByContainerParams) -> Result<ResponseContent<HeadAudioStreamByContainerSuccess>, Error<HeadAudioStreamByContainerError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let container = params.container;
    let r#static = params.r#static;
    let params_ = params.params;
    let tag = params.tag;
    let device_profile_id = params.device_profile_id;
    let play_session_id = params.play_session_id;
    let segment_container = params.segment_container;
    let segment_length = params.segment_length;
    let min_segments = params.min_segments;
    let media_source_id = params.media_source_id;
    let device_id = params.device_id;
    let audio_codec = params.audio_codec;
    let enable_auto_stream_copy = params.enable_auto_stream_copy;
    let allow_video_stream_copy = params.allow_video_stream_copy;
    let allow_audio_stream_copy = params.allow_audio_stream_copy;
    let break_on_non_key_frames = params.break_on_non_key_frames;
    let audio_sample_rate = params.audio_sample_rate;
    let max_audio_bit_depth = params.max_audio_bit_depth;
    let audio_bit_rate = params.audio_bit_rate;
    let audio_channels = params.audio_channels;
    let max_audio_channels = params.max_audio_channels;
    let profile = params.profile;
    let level = params.level;
    let framerate = params.framerate;
    let max_framerate = params.max_framerate;
    let copy_timestamps = params.copy_timestamps;
    let start_time_ticks = params.start_time_ticks;
    let width = params.width;
    let height = params.height;
    let video_bit_rate = params.video_bit_rate;
    let subtitle_stream_index = params.subtitle_stream_index;
    let subtitle_method = params.subtitle_method;
    let max_ref_frames = params.max_ref_frames;
    let max_video_bit_depth = params.max_video_bit_depth;
    let require_avc = params.require_avc;
    let de_interlace = params.de_interlace;
    let require_non_anamorphic = params.require_non_anamorphic;
    let transcoding_max_audio_channels = params.transcoding_max_audio_channels;
    let cpu_core_limit = params.cpu_core_limit;
    let live_stream_id = params.live_stream_id;
    let enable_mpegts_m2_ts_mode = params.enable_mpegts_m2_ts_mode;
    let video_codec = params.video_codec;
    let subtitle_codec = params.subtitle_codec;
    let transcode_reasons = params.transcode_reasons;
    let audio_stream_index = params.audio_stream_index;
    let video_stream_index = params.video_stream_index;
    let context = params.context;
    let stream_options = params.stream_options;
    let enable_audio_vbr_encoding = params.enable_audio_vbr_encoding;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Audio/{itemId}/stream.{container}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), container=crate::apis::urlencode(container));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = r#static {
        local_var_req_builder = local_var_req_builder.query(&[("static", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = params_ {
        local_var_req_builder = local_var_req_builder.query(&[("params",serde_json::to_string(&local_var_str).unwrap())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_profile_id {
        local_var_req_builder = local_var_req_builder.query(&[("deviceProfileId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = play_session_id {
        local_var_req_builder = local_var_req_builder.query(&[("playSessionId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = segment_container {
        local_var_req_builder = local_var_req_builder.query(&[("segmentContainer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = segment_length {
        local_var_req_builder = local_var_req_builder.query(&[("segmentLength", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = min_segments {
        local_var_req_builder = local_var_req_builder.query(&[("minSegments", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = media_source_id {
        local_var_req_builder = local_var_req_builder.query(&[("mediaSourceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("deviceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_codec {
        local_var_req_builder = local_var_req_builder.query(&[("audioCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_auto_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("enableAutoStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allow_video_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("allowVideoStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allow_audio_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("allowAudioStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = break_on_non_key_frames {
        local_var_req_builder = local_var_req_builder.query(&[("breakOnNonKeyFrames", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_sample_rate {
        local_var_req_builder = local_var_req_builder.query(&[("audioSampleRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_bit_depth {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioBitDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_bit_rate {
        local_var_req_builder = local_var_req_builder.query(&[("audioBitRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("audioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = profile {
        local_var_req_builder = local_var_req_builder.query(&[("profile", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = level {
        local_var_req_builder = local_var_req_builder.query(&[("level", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = framerate {
        local_var_req_builder = local_var_req_builder.query(&[("framerate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_framerate {
        local_var_req_builder = local_var_req_builder.query(&[("maxFramerate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = copy_timestamps {
        local_var_req_builder = local_var_req_builder.query(&[("copyTimestamps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_time_ticks {
        local_var_req_builder = local_var_req_builder.query(&[("startTimeTicks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_bit_rate {
        local_var_req_builder = local_var_req_builder.query(&[("videoBitRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_method {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleMethod", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_ref_frames {
        local_var_req_builder = local_var_req_builder.query(&[("maxRefFrames", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_video_bit_depth {
        local_var_req_builder = local_var_req_builder.query(&[("maxVideoBitDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = require_avc {
        local_var_req_builder = local_var_req_builder.query(&[("requireAvc", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = de_interlace {
        local_var_req_builder = local_var_req_builder.query(&[("deInterlace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = require_non_anamorphic {
        local_var_req_builder = local_var_req_builder.query(&[("requireNonAnamorphic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcoding_max_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("transcodingMaxAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cpu_core_limit {
        local_var_req_builder = local_var_req_builder.query(&[("cpuCoreLimit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = live_stream_id {
        local_var_req_builder = local_var_req_builder.query(&[("liveStreamId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_mpegts_m2_ts_mode {
        local_var_req_builder = local_var_req_builder.query(&[("enableMpegtsM2TsMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_codec {
        local_var_req_builder = local_var_req_builder.query(&[("videoCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_codec {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcode_reasons {
        local_var_req_builder = local_var_req_builder.query(&[("transcodeReasons", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("audioStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("videoStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = context {
        local_var_req_builder = local_var_req_builder.query(&[("context", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stream_options {
        local_var_req_builder = local_var_req_builder.query(&[("streamOptions",serde_json::to_string(&local_var_str).unwrap())]);
    }
    if let Some(ref local_var_str) = enable_audio_vbr_encoding {
        local_var_req_builder = local_var_req_builder.query(&[("enableAudioVbrEncoding", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<HeadAudioStreamByContainerSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<HeadAudioStreamByContainerError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

