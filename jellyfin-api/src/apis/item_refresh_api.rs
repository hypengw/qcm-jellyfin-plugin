/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`refresh_item`]
#[derive(Clone, Debug)]
pub struct RefreshItemParams {
    /// Item id.
    pub item_id: String,
    /// (Optional) Specifies the metadata refresh mode.
    pub metadata_refresh_mode: Option<String>,
    /// (Optional) Specifies the image refresh mode.
    pub image_refresh_mode: Option<String>,
    /// (Optional) Determines if metadata should be replaced. Only applicable if mode is FullRefresh.
    pub replace_all_metadata: Option<bool>,
    /// (Optional) Determines if images should be replaced. Only applicable if mode is FullRefresh.
    pub replace_all_images: Option<bool>,
    /// (Optional) Determines if trickplay images should be replaced. Only applicable if mode is FullRefresh.
    pub regenerate_trickplay: Option<bool>
}


/// struct for typed successes of method [`refresh_item`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RefreshItemSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`refresh_item`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RefreshItemError {
    Status404(models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}


pub async fn refresh_item(configuration: &configuration::Configuration, params: RefreshItemParams) -> Result<ResponseContent<RefreshItemSuccess>, Error<RefreshItemError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let item_id = params.item_id;
    let metadata_refresh_mode = params.metadata_refresh_mode;
    let image_refresh_mode = params.image_refresh_mode;
    let replace_all_metadata = params.replace_all_metadata;
    let replace_all_images = params.replace_all_images;
    let regenerate_trickplay = params.regenerate_trickplay;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Refresh", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = metadata_refresh_mode {
        local_var_req_builder = local_var_req_builder.query(&[("metadataRefreshMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_refresh_mode {
        local_var_req_builder = local_var_req_builder.query(&[("imageRefreshMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = replace_all_metadata {
        local_var_req_builder = local_var_req_builder.query(&[("replaceAllMetadata", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = replace_all_images {
        local_var_req_builder = local_var_req_builder.query(&[("replaceAllImages", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = regenerate_trickplay {
        local_var_req_builder = local_var_req_builder.query(&[("regenerateTrickplay", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<RefreshItemSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<RefreshItemError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

